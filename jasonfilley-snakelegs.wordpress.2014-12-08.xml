<channel>
	<title>Jason Filley - SnakeLegs</title>
	<link>http://www.snakelegs.org</link>
	<description>Upon thy belly shalt thou go....</description>
	<pubDate>Mon, 08 Dec 2014 09:45:17 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://www.snakelegs.org</wp:base_site_url>
	<wp:base_blog_url>http://www.snakelegs.org</wp:base_blog_url>

	<item>
				<title>banjo: Bach&#039;s Prelude in C Major (BWV 846)</title>
		<link>http://www.snakelegs.org/banjo-bachs-prelude-in-c-major-bwv-846/</link>
		<pubDate>Thu, 18 May 2006 17:52:36 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.snakelegs.org/2006/05/18/banjo-bachs-prelude-in-c-major-bwv-846/</guid>
		<description></description>
		<content:encoded><![CDATA[I got a wild hair to start playing classical music on the banjo a while back.

I'll add more songs as I learn them.

<a href="http://www.snakelegs.org/banjo/Bach_Prelude_in_C_BWV_846.mp3">MP3 recording of Bach's Prelude in C Major (BWV 846) on the 5-string banjo</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>8</wp:post_id>
		<wp:post_date>2006-05-18 13:52:36</wp:post_date>
		<wp:post_date_gmt>2006-05-18 17:52:36</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>banjo-bachs-prelude-in-c-major-bwv-846</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="music"><![CDATA[Music]]></category>
		<wp:postmeta>
			<wp:meta_key>enclosure</wp:meta_key>
			<wp:meta_value><![CDATA[http://www.snakelegs.org/banjo/Bach_Prelude_in_C_BWV_846.mp3
3120653
audio/x-mpeg
]]></wp:meta_value>
		</wp:postmeta>
	</item>

	<item>
				<title>Visual Basic Implementation of Double Metaphone</title>
		<link>http://www.snakelegs.org/visual-basic-implementation-of-double-metaphone/</link>
		<pubDate>Thu, 18 May 2006 18:05:15 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.snakelegs.org/2006/05/18/visual-basic-implementation-of-double-metaphone/</guid>
		<description></description>
		<content:encoded><![CDATA[My <a href="http://www.planetsourcecode.com/vb/scripts/ShowCode.asp?txtCodeId=36526&lngWId=1" target="_blank">Visual Basic implementation</a> (external link to PlanetSourceCode)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>10</wp:post_id>
		<wp:post_date>2006-05-18 14:05:15</wp:post_date>
		<wp:post_date_gmt>2006-05-18 18:05:15</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>visual-basic-implementation-of-double-metaphone</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="computers"><![CDATA[Computers]]></category>
	</item>

	<item>
				<title>email: Convert LISTSERV archives</title>
		<link>http://www.snakelegs.org/email-convert-listserv-archives/</link>
		<pubDate>Wed, 24 May 2006 06:44:44 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.snakelegs.org/2006/05/24/email-convert-listserv-archives/</guid>
		<description></description>
		<content:encoded><![CDATA[<pre>#!/bin/sh -x
# Use ls2mail to convert a LISTSERV(R) list archive to a UNIX mbox
# Then use Aid4Mail to convert the mbox to?whatever you wish. It
# took under half an hour for me to convert a decade’s worth of around
# 50 lists into a single Outlook .pst file. Quite handy.
# SRCDIR is where the LISTSERV .LOG files are located
SRCDIR=’/home/me/LISTSERV’
DSTDIR=’/home/me/other’
cd $SRCDIR

for i in LISTONE LISTTWO LISTTHREE; do

# concatenate archives sequentially.
# if you have lists from the 80’s add a .LOG8* line…
cat $SRCDIR/$i.LOG9* &gt;&gt; $DSTDIR/$i
cat $SRCDIR/$i.LOG0* &gt;&gt; $DSTDIR/$i

# my LISTSERV install ran on Windows.
# this strips carriage returns (0×15) at the end of line.
perl -i -p -e ’s/\r$//’ $DSTDIR/$i

# now that a list’s archives are in one file, convert it to an mbox
cat $DSTDIR/$i | ./ls2mail.pl &gt; $DSTDIR/$i.mbox

done

# here you should end up with $DSTDIR/(LISTONE|LISTTWO|LISTTHREE).mbox

# Again, just use Aid4Mail to convert it from there to whatever you wish.
# http://homepages.tesco.net/J.deBoynePollard/FGA/mail-mbox-formats.html
# http://hypermail-project.org/archive/99/12/1216.html
# http://www.aid4mail.com/</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>12</wp:post_id>
		<wp:post_date>2006-05-24 02:44:44</wp:post_date>
		<wp:post_date_gmt>2006-05-24 06:44:44</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>email-convert-listserv-archives</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="computers"><![CDATA[Computers]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>


	<item>
				<title>Migrating Excalibur EFS to Adobe Acrobat PDF&#039;s</title>
		<link>http://www.snakelegs.org/migrating-excalibur-efs-to-adobe-acrobat-pdfs/</link>
		<pubDate>Tue, 30 May 2006 21:52:03 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.snakelegs.org/2006/05/30/migrating-excalibur-efs-to-adobe-acrobat-pdfs/</guid>
		<description></description>
		<content:encoded><![CDATA[Here's a quick perl script I used to migrate Excalibur EFS 3.7 filerooms to Adobe Acrobat PDF's. Keywords: excalibur, EFS, efsbatch.

<!--more-->

#!/usr/bin/perl
# This is a plodding, quick script to migrate Excalibur EFS
# filerooms (my version at 3.7) to Adobe Acrobat PDF's. Since
# EFS stores the images in .tiff files, it's rather easy.
#
# Use efsbatch to export a list of the contents of your fileroom
# (see pg. 6-23 in the Technical Reference).
#
# Create a file "bob.whatever" with contents "DETAILS f:".
# Then cd to the fileroom (e.g. /image/users/africa_fileroom) and
# run 'efsbatch bob.whatever &gt;&gt; africa_fileroom.details'.
#
# I copied the fileroom dirs off to a separate machine, hence the
# different paths.  Play around with your setup. This should get
# you close.
#
# requires libtiff for tiffcp and tiff2pdf
# <a href="http://www.remotesensing.org/libtiff/">http://www.remotesensing.org/libtiff/</a>

use warnings;
#use strict;
use File::Basename;
use File::Path;

$basepath='/pickup/EFS/';
$destpath='/pickup/EFS/processed/';
while ( ) {
  chop $_;
     if (/^Document/) {
    @docinfo = split(/ /, $_, 3);
    #zero out @sourcetiffs
     $#sourcetiffs = -1;

     #print "$_\n";

     $numofpages = $docinfo[1];
   #print "$numofpages\n";

     $fullpathname = $docinfo[2];
     #print "$fullpathname\n";

      $fullpathname = substr($fullpathname, 2);
      #print "$fullpathname\n";

      $dirname = dirname($fullpathname);
      #print "$dirname\n";

      $relativepathname = substr($dirname, 1);
      #print "$relativepathname\n";

       $documentname = basename($fullpathname);
       #print "$documentname\n";

     #print "\n";

  }
 if (/^\d.*\/image\/users\/.*\.tif$/) {

    #print $_;
    #print "\n";

   @imageinfo = split(/ /, $_, 3);

    $tiffdocnum = $imageinfo[0];
    #print "$tiffdocnum\n";

    $tiffpath = $imageinfo[2];
    #print "$tiffpath\n";

    $reltiffpath = substr($tiffpath, 13);
    #print "$reltiffpath\n";

    $srctiffpath = $basepath . $reltiffpath;
    #print "srctiffpath = $srctiffpath\n";

    push(@sourcetiffs, $srctiffpath);

    # If this is the last file in the document,
    # create the directory and call tiffcp to merge
    # them into one tiff. Then run tiff2pdf to create
   # the PDF.

  if ($tiffdocnum == $numofpages) {

  #Create the target directory
  $desttiffpath = $destpath . $relativepathname . "\/";
  #print "mkpath($desttiffpath, 1, 0770)\n";
  mkpath($desttiffpath, 1, 0770);
  #Call tiffcp on @sourcetiffs to final .tiff
  $cmdtiffcp = "tiffcp -c lzw @sourcetiffs \"$desttiffpath$documentname.tiff\"";
  #print "sourcetiffs = @sourcetiffs\n";
  #print "$cmdtiffcp\n\n";
  system("$cmdtiffcp");

  #Convert final .tiff to PDF
  $cmdtiff2pdf = "tiff2pdf -o \"$desttiffpath$documentname.pdf\" \"$desttiffpath$documentname.tiff\"";
  #print "$cmdtiff2pdf\n\n";
  system("$cmdtiff2pdf");
  system("rm -f \"$desttiffpath$documentname.tiff\"");

   }

  }

}]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>14</wp:post_id>
		<wp:post_date>2006-05-30 17:52:03</wp:post_date>
		<wp:post_date_gmt>2006-05-30 21:52:03</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>migrating-excalibur-efs-to-adobe-acrobat-pdfs</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="computers"><![CDATA[Computers]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	
	<item>
				<title>The Bourne Supremacy</title>
		<link>http://www.snakelegs.org/the-bourne-supremacy/</link>
		<pubDate>Thu, 24 Aug 2006 03:09:52 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.snakelegs.org/2006/08/23/the-bourne-supremacy/</guid>
		<description></description>
		<content:encoded><![CDATA[<em>The Bourne Supremacy</em> and its predecessor <em>The Bourne Identity</em> are required viewing. Watch them if you haven't.

Here ("I'm gonna ask you <strong>some some</strong> simple questions.") is a form of parablepsis called <a href="http://en.wikipedia.org/wiki/Dittography">dittography</a> -- the unintentional repetition of characters. See <a href="http://www.bible.org/page.asp?page_id=2795" target="_blank">a Biblical example (II Samuel 6:3-4)</a>. Or another at <a href="http://www.biblegateway.com/passage/?search=Leviticus%2020:10;&version=9;">Leviticus 20:10</a>.
<p align="center">(Click on the picture)</p>
<a href="http://www.snakelegs.org/wp-content/uploads/2006/08/bourne_supremacy.jpg" target="_blank">
<div style="text-align: center"><img id="image28" style="width: 196px; height: 104px" height="104" alt="bourne_supremacy.jpg" src="http://www.snakelegs.org/wp-content/uploads/2006/08/bourne_supremacy.thumbnail.jpg" width="196" /></div>
</a>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>27</wp:post_id>
		<wp:post_date>2006-08-23 23:09:52</wp:post_date>
		<wp:post_date_gmt>2006-08-24 03:09:52</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>the-bourne-supremacy</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="subtitles"><![CDATA[Subtitle Goofs]]></category>
	</item>
				<title>Fried Zucchini</title>
		<link>http://www.snakelegs.org/fried-zucchini/</link>
		<pubDate>Mon, 25 Sep 2006 06:26:47 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.snakelegs.org/2006/09/25/fried-zucchini/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>52</wp:post_id>
		<wp:post_date>2006-09-25 02:26:47</wp:post_date>
		<wp:post_date_gmt>2006-09-25 06:26:47</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>fried-zucchini</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="recipes"><![CDATA[Recipes]]></category>
	</item>

	<item>
				<title>Nine Ingredient Ten Ingredient Fried Rice</title>
		<link>http://www.snakelegs.org/nine-ingredient-ten-ingredient-fried-rice/</link>
		<pubDate>Fri, 29 Sep 2006 20:20:53 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.snakelegs.org/2006/09/29/nine-ingredient-ten-ingredient-fried-rice/</guid>
		<description></description>
		<content:encoded><![CDATA[<p style="text-align: center" align="center"><img id="image55" height="240" alt="Nine Ingredient Ten Ingredient Rice" src="http://www.snakelegs.org/wp-content/uploads/2006/09/ten_ingredient.jpg" width="320" /></p>
Why does]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>56</wp:post_id>
		<wp:post_date>2006-09-29 16:20:53</wp:post_date>
		<wp:post_date_gmt>2006-09-29 20:20:53</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>nine-ingredient-ten-ingredient-fried-rice</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="main"><![CDATA[Main]]></category>
	</item>

	<item>
				<title>Wassail</title>
		<link>http://www.snakelegs.org/wassail/</link>
		<pubDate>Tue, 17 Oct 2006 04:58:44 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.snakelegs.org/2006/10/17/wassail/</guid>
		<description></description>
		<content:encoded><![CDATA[<img id="image62" height="96" alt="Wassail" src="http://www.snakelegs.org/wp-content/uploads/2006/10/wassail.thumbnail.JPG" width="72" />The best thing about cold weather is drinking <a title="Wikipedia - Wassail" href="http://en.wikipedia.org/wiki/Wassail" target="_blank">wassail</a>.

Get a big pot.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>61</wp:post_id>
		<wp:post_date>2006-10-17 00:58:44</wp:post_date>
		<wp:post_date_gmt>2006-10-17 04:58:44</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>wassail</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="main"><![CDATA[Main]]></category>
		<category domain="category" nicename="recipes"><![CDATA[Recipes]]></category>
	</item>
	<item>
				<title>Brisket</title>
		<link>http://www.snakelegs.org/brisket/</link>
		<pubDate>Mon, 23 Oct 2006 02:31:06 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.snakelegs.org/2006/10/22/brisket/</guid>
		<description></description>
		<content:encoded><![CDATA[<font size="2">Ingredients:</font><font size="2">
<ul>
	<li>1 (4-5 lb) brisket</li>
	<li>1 teaspoon steak seasoning</li>
	<li>2 Tablespoons liquid smoke</li>
	<li>1/3 cup Worchestershire sauce</li>
	<li>3/4 cup barbecue sauce</li>
</ul>
Directions:

Sprinkle beef with seasoning salt. Place in a shallow dish. Pour liquid smoke and Worchestershire sauce over meat. Cover with foil and refrigerate 8 hours, turning once. Cover and bake at 300 degrees for 4 hours or until tender. Pour off liquid reserving 1/2 cup. Mix with barbecue sauce. Pour over beef. Bake, uncovered for 30 minutes. To serve, slice across grain into thin slices.

<p /></font>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>63</wp:post_id>
		<wp:post_date>2006-10-22 22:31:06</wp:post_date>
		<wp:post_date_gmt>2006-10-23 02:31:06</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>brisket</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="main"><![CDATA[Main]]></category>
		<category domain="category" nicename="recipes"><![CDATA[Recipes]]></category>
	</item>
	<item>
				<title>Roast Beef Wraps</title>
		<link>http://www.snakelegs.org/roast-beef-wraps/</link>
		<pubDate>Tue, 07 Nov 2006 02:29:05 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.snakelegs.org/2006/11/06/roast-beef-wraps/</guid>
		<description></description>
		<content:encoded><![CDATA[<img id="image65" height="96" alt="Roast Beef Wraps" src="http://www.snakelegs.org/wp-content/uploads/2006/11/roast_beef_wraps.thumbnail.JPG" width="128" />

Delicious!
 •1/4 cup pineapple preserves
 •1/4 cup dijon mustard
 •2 Tablespoons tartar sauce
 •chopped walnuts
 •wheat wraps
 •sliced cheddar cheese
 •spinach leaves (if you can get ‘em, otherwise, use lettuce)
 •sliced roast beef
 •chopped green onion
 
Mix the pineapple preserves, dijon mustard, and tartar sauce.

Spread it on the wrap.

Slap everything else on.

Roll it up, and stick some toothpicks in it.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>64</wp:post_id>
		<wp:post_date>2006-11-06 22:29:05</wp:post_date>
		<wp:post_date_gmt>2006-11-07 02:29:05</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>roast-beef-wraps</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="main"><![CDATA[Main]]></category>
		<category domain="category" nicename="recipes"><![CDATA[Recipes]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
				<title>Brainstorming spamd greylisting</title>
		<link>http://www.snakelegs.org/brainstorming-spamd-greylisting/</link>
		<pubDate>Sun, 21 Jan 2007 07:23:54 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.snakelegs.org/2007/01/21/brainstorming-spamd-greylisting/</guid>
		<description></description>
		<content:encoded><![CDATA[Here's some late-night brainstorming on what can be done with spamd greylist entries during the time they're greylisted.

<!--more-->

<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=spamd&amp;apropos=0&amp;sektion=0&amp;manpath=OpenBSD+Current&amp;arch=i386&amp;format=html" target="_blank">spamd(8)</a> is OpenBSD's spam deferral daemon, which manipulates pf(4) tables to pass or block network connections from email senders to your valid mail servers. spamd was written by Bob Beck, and it's worth listening to his <a href="http://www.fetissov.org/public/nycbsdcon06/" target="_blank">NYCBSDCON presentation on spamd</a>, which is a very funny presentation.

<a href="http://www.greylisting.org" target="_blank">Greylisting</a> is the practice of monitoring the envelope from and to, and the sending IP address -- a 'tuple' -- and temporarily rejecting each new, unique instance. Spam-sending software has historically not done what real mail servers do on a temporary failure -- retry later -- so greylisting has been a computationally cheap means of ignoring a lot of spam. It's like a Rabbi's <a href="http://www.wikihow.com/Convert-to-Judaism" target="_blank">traditional three-time rebuff</a> of a person seeking to convert to Judaism. If they're serious, they'll be back. Every time a new IP address attempts to establish an SMTP session with your mailserver, reject the message temporarily, and if they come back, carry on with mail processing.

Greylisting as originally described only whitelisted a distinct tuple. For instance, if john@example.com sent email to suzy@example.edu from IP <em>a.b.c.d</em>, john's mail server would get temporarily rejected, would try again later, and after a set interval, his email would then be allowed to be delivered. Now he was whitelisted. He could send suzy@ another message, and it would be delivered immediately, provided it came from the same IP address. He'd have to go through the whole process again, though, to send mail to the different address becky@example.com.

spamd does no mail processing. It doesn't forward mail. It doesn't receive any mail. spamd will never once handle a single SMTP session that will result in a successful delivery. It's a minimalist SMTP implementation that elicits the needed tuple, and then gives a temporary error. If you successfully retry after the threshold time, you're whitelisted. You can send any from or to from that IP address now. Since spamd only manipulates IP addresses in a firewall table, it can't analyze the body of the message and won't even see further SMTP sessions from that address.

spamd manipulates pf firewall tables. When an SMTP session is attempted to your mailserver: if the IP is whitelisted, then it connects to your server; if the IP is not whitelisted, the connection gets re-routed to the spamd daemon, which wastes a little of the sender's time (a good thing) and adds entries to the greylisting database.

The best part of greylisting is that it allows you some check-up time on email from new hosts. Take their name and who they're here to see, and tell them to come back later. In the meantime, do some calling around to see if they're legit.

After implementing spamd in greylisting mode, I started making notes about different ways to filter out even more spam, based only on the nine fields in a GREY entry, as <a href="http://www.ualberta.ca/~beck/greyscanner" target="_blank">Beck's greyscanner </a>does. There is, by default, 26 minutes from the time we first hear from a new IP address until we'll let them connect to our real mailserver. During that 26 minutes, we can do some sleuthing to see if we should just cut them out altogether, or whitelist them. The longer our greylist <em>passtime</em>, the more time different services (DNSBL's, <a href="http://www.surbl.org/" target="_blank">SURBL</a>'s, etc.,) have to find out about the IP address in question.

The spamd database entries for greylisted hosts (this is the first time we've heard from you) look like this, as processed with the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=spamdb&amp;apropos=0&amp;sektion=0&amp;manpath=OpenBSD+Current&amp;arch=i386&amp;format=html" target="_blank">spamdb(8)</a> utility:

type|source ip|from|to|first|pass|expire|block|pass

For example:
GREY|82.121.246.13|arborealcarbonium@roullet.com|a.stark@example.com|1169133007|1169147407|1169147407|1|0

<em>[Note: angle brackets removed from from and to, because this editor that comes with WordPress just sucks.  Always munges angle brackets.  Manually enter the HTML for gt and lt, and it still munges them.  Very irritating.]</em>

All greylisted entries are of type "GREY," so `spamdb | grep "^GREY"` will list all greylisted entries. What to do with them...? Can we make reasonable determinations about the validity of these email attempts using only these 9 fields?

<em>type</em> is already known. We could deduce important information from <em>source ip</em>, <em>from</em>, <em>to</em>, and <em>first</em>. <em>pass</em>, <em>expire</em>, <em>block</em>, and <em>pass</em> are administrator-configuration variable or random, so I see nothing that could be gleaned from them.

With these four pieces of information, we have fifteen possible combinations of criteria (2<sup>n</sup>-1). We can <em>whitelist </em>or <em>trap </em>with spamdb. It would be nice to be able to manipulate <em>passtime</em> to extend the greylist threshold. Say, default is 26 minutes, and the max <em>passtime</em> is 210 minutes (for instance) -- I'd like to be able to `spamdb -m <em>a.b.c.d`</em> to maximize the time before the IP can get whitelisted. I'd provide the diff if I knew C better....
<blockquote><strong>source ip: </strong>["We have a message from IP address __.__.__.__. Based solely on that, what should we do?"]
<ul>
	<li>Whitelisted hosts won't get routed to spamd, so you'd never whitelist on this -- it should already be done.</li>
	<li>See if they're on a <a href="http://en.wikipedia.org/wiki/DNSBL" target="_blank">DNSBL</a>. I highly recommend the standard <a href="http://www.spamhaus.org/xbl/index.lasso" target="_blank">sbl-xbl.spamhaus.org</a> list. If the sender is on the spamhaus list, it is an overwhelming indication that I don't want them to access my real server. I do not accept any mail from anyone on the spamhaus list.</li>
	<li>Check against a similar reputation service. Example: <a href="http://bsn.borderware.com/index.php" target="_blank">Borderware Security Network</a>.</li>
	<li><a href="http://en.wikipedia.org/wiki/Geolocation_software#Spam_Fighting" target="_blank">Geolocation</a>. China and Korea IP addresses are routinely blacklisted, since, historically, they've been havens for spammers. And it's very doubtful a regional plumbing distributor in Akron would be getting mail from a Nigerian mail server. Perl module <a href="http://search.cpan.org/~nwetters/IP-Country-DNSBL-1.02/lib/IP/Country/DNSBL.pm" target="_blank">IP::Country::DNSBL - IP geolocation via DNS</a>. Personally, I would be wary of this, given the global nature of bigger business, but for certain home or SOHO, it might be reasonable.</li>
	<li>Wonder if there'd be a way to check against the <a href="http://en.wikipedia.org/wiki/Autonomous_System_Number" target="_blank">ASN</a>?</li>
</ul>
</blockquote>
<blockquote><strong>from:</strong> ["We have a message that says the sender is _____. Based solely on that, what should we do?"]
<ul>
	<li>Make sure it's a valid address: <a href="http://search.cpan.org/~maurice/Email-Valid/Valid.pm" target="_blank">Email::Valid</a>. If it's an illegal address, trap the host.</li>
	<li>Make sure the domain part has an A or MX record. This address, after all, is where bounces are supposed to be delivered. If there are no A or MX records, it can't possibly play nice, so trap it. Email::Valid above can check this. greyscanner does the same, using the same. Wonder what the timeout values are? How many attempts at how many hosts for how long?</li>
	<li><em><a href="http://www.ualberta.ca/~beck/greyscanner" target="_blank">greyscanner</a></em> has the nifty feature of looking for multiple from: domains.  Why would a mail server you haven't previously talked to start sending mail from: a bunch of different domains?  Very clever.  It's perfectly reasonable that a new server could send to: different domains you manage.  Although, it's even reasonable that a new mailer be sending you multiple from: addresses in the same domain -- a mailing list utilizing <a href="http://en.wikipedia.org/wiki/Variable_envelope_return_path" target="_blank">VERP</a>, for instance.  The following is obviously spam:</li>
<blockquote>GREY|82.121.246.13|arborealcarbonium@roullet.com|john.smith@example.com|1169133522|1169147922|1169147922|1|0
GREY|82.121.246.13|beadclothesmen@rossoconero.com|john.smith@example.com|1169133007|1169147407|1169147407|1|0
GREY|82.121.246.13|brainchildchambers@rounen.org|john.smith@example.com|1169133107|1169147507|1169147507|1|0
GREY|82.121.246.13|certainclinton@roterfadenfanzine.de|john.smith@example.com|1169133399|1169147799|1169147799|1|0
GREY|82.121.246.13|coleusanother@rottier.nu|john.smith@example.com|1169133268|1169147668|1169147668|1|0
GREY|82.121.246.13|criedbristle@rossera.it|john.smith@example.com|1169133439|1169147839|1169147839|1|0
GREY|82.121.246.13|crystallographydesolater@rothfam.com|john.smith@example.com|1169133550|1169147950|1169147950|1|0
GREY|82.121.246.13|cubbyholeaida@rowlands.com.au|john.smith@example.com|1169133214|1169147614|1169147614|1|0
GREY|85.220.3.122|alundumcomedian@rrhhcl5.bumeran.com|john.smith@example.com|1169134073|1169148473|1169148473|1|0
GREY|85.220.3.122|autonomicallied@roundtreecapital.com|john.smith@example.com|1169134327|1169148727|1169148727|1|0
GREY|85.220.3.122|banditczerniak@royalpeaks.ca|john.smith@example.com|1169134085|1169148485|1169148485|1|0
GREY|85.220.3.122|countdownchapman@rowel.net|john.smith@example.com|1169134169|1169148569|1169148569|1|0
GREY|88.226.142.72|abdominalcontradistinct@rotrock.no|john.smith@example.com|1169133641|1169148041|1169148041|1|0
GREY|88.226.142.72|artisanbesiege@rozwody.pl|john.smith@example.com|1169133306|1169147706|1169147706|1|0
GREY|88.226.142.72|backtrackcerberus@rouxinternational.com|john.smith@example.com|1169133201|1169147601|1169147601|1|0
GREY|88.226.142.72|crescentabel@rova.ru|john.smith@example.com|1169133073|1169147473|1169147473|1|0
GREY|88.226.142.72|czbebop@routevaudoisluberon.com|john.smith@example.com|1169133029|1169147429|1169147429|1|0
GREY|88.226.142.72|decreeingavery@royrayinsurance.com|john.smith@example.com|1169133325|1169147725|1169147725|1|0</blockquote>
	<li><a href="http://www.postfix.org/ADDRESS_VERIFICATION_README.html" target="_blank">Sender address verification</a>? <a href="http://archive.openbsd.nu/?ml=openbsd-tech&amp;a=2006-11&amp;t=2574258" target="_blank">Stupid Verizon</a>. Dumb idea. So if I'm at home and I telnet to a Verizon server's SMTP port and say I'm <a href="mailto:bigbutts@obtuse.com">bigbutts@obtuse.com</a> (listen to the presentation at the top), then Verizon is going to go connect to foad.obtuse.com and try to probe bigbutts. Boy, that sounds funny. I'm pretty sure that'll get their probe IP trapped there. Too easy to poison, and it's pointless. So let's not do this, because it's Verizon stupid, which is just a shade stupider than <a href="http://postmaster.aol.com/guidelines/standards.html" target="_blank">AOL stupid</a> and <a href="http://www.comcast.com/customers/faq/FaqCategory.ashx?CatId=415" target="_blank">Comcast stupid</a>. <em>[As a side note, </em><a href="http://homepages.tesco.net/J.deBoynePollard/FGA/smtp-avoid-helo.html" target="_blank"><em>you MUST NOT refuse to accept a message based on the HELO parameter </em></a><em>(</em><a href="http://www.ietf.org/rfc/rfc2821.txt" target="_blank"><em>RFC 2128, sec. 4.1.4</em></a><em>). Bozos.]</em></li>
	<li>Remember the null sender &lt;&gt; for bounces.</li>
	<li>If the from: is from one of your domains, I'd trap it, assuming you have already whitelisted known other sender locations (your cell phone provider's addresses), and users submit mail from a secured location (VPN) or use a different submission service.</li>
</ul>
</blockquote>
<blockquote><strong>to: </strong>["We have a message for mailbox ________. Based solely on that, what should we do?"]
<ul>
	<li>Whitelist. Handy thing would be to rotate passwords. Generate a little random userpart string (e.g., "aeifj13") and have it automatically emailed to the helpdesk and admins. That's your temporary whitelist password, good for a week maybe. If someone needs to send mail pronto to you, give them the password -- tell them to send mail to aeifj13@example.com. Then have a process that scans and whitelists anyone sending email to the secret address.  So if a prospect has a virus-infected server that got them on the <a href="http://cbl.abuseat.org/" target="_blank">CBL</a> / <a href="http://www.spamhaus.org/xbl/index.lasso" target="_blank">SBL-XBL</a> and now you're blocking them, but they also have an RFP for $200,000, you're just going to have to whitelist them.</li>
	<li>If it's a bogus address, you could trap the host. This is very effective. It would be even nicer if you could accept the mail, instead of bouncing it, to keep the spammer list dirty. It would be better still to have it act like a stupid user and visit every URL in every message, to confirm reading.  Then, I suppose, spammers could insert hidden URL's that a live human wouldn't visit, just to let them know when their hand's been tipped. But spamd works against pf tables, so you'd have to monkey around some other way. Redirect bogus mailers to a different MTA instance....?</li>
	<li>Trap relay attempts.  No sense letting them talk to your real server.</li>
	<li>What about typos in the user part? Say they're trying to email jack.andreeson@example.com and enter jack.andreson@example.com instead? Spellcheck it? You can block a lot by picking up senders sending to BS names, but would you want to block out a sales or press inquiry just because a prospect fat-fingered a real address? Might be reasonable to allow anything with a <a href="http://search.cpan.org/~jgoldberg/Text-Levenshtein-0.05/Levenshtein.pm">Levenshtein Edit Distance</a> of 1 or 0 -- only 1 deletion, insertion, or inversion to match, or already a match. This assumes you have a list of valid email accounts, which a corporate environment is easily done by dumping aliases, virtual mappings, LDAP email attributes, and the like.</li>
	<li>Remember [1.2.3.4] address literals.</li>
	<li>&lt; [abuse|postmaster]@...&gt; might be troublesome, since those addresses are supposed to always exist, and they're not infrequently configured to bypass any spam protection, so that anyone can forward problem reports to the mail maintainer of the domain.  Sending a fake bounce (from &lt;&gt; to postmaster@) and then retrying half an hour later would be a surefire way to defeat a stock install. Don't know how to work around that, having IP-based greylisting.</li>
	<li>Plain postmaster (without any domain) is required to work, as well. <a href="http://www.ietf.org/rfc/rfc2821.txt" target="_blank">RFC 2821, sec 4.5.1</a></li>
	<li>greyscanner has a section using a regex against the <strong>to: </strong>, which is quite effective. Get a $6 domain and trap everyone sending to it (watch out for bounces from forged spam, though -- not sure how others manage that). For instance, you get dsfijsfi23.org and post a few web pages with the address and then trap everyone sending to it. Well, some spammer sends mail with a header from: ("<em>reverse-path</em>") of mesohorny@dsfijsfi23.org to nonexistent@example.com, and the example.com mail server bounces the message to you ("<em><a href="http://en.wikipedia.org/wiki/Backscatter#Backscatter_of_email_spam" target="_blank">backscatter</a></em>"), causing you to trap example.com's sender IP, when they didn't do anything wrong.</li>
</ul>
<strong>first:</strong> ["We have a connection from an IP address being made for the first time at _________ (3:13:46 a.m., for example). Based solely on the time of first contact, what should we do?"]
<ul>
	<li>If someone has never talked to me before, and they're sending me mail during my non-business hours (nights and weekends), I wouldn't mind delaying them longer than the default passtime, since no one's there to read it anyway.  This wouldn't work for global business getting a lot of time-critical mail in off-hours. But see <strong>first &amp; to</strong> further along.</li>
</ul>
<strong>from &amp; source ip:</strong> ["We have a connection from IP address __.__.__.__ with a sender of _______. Based solely on that, what should we do?"
<ul>
	<li><a href="http://www.openspf.org/" target="_blank">SPF</a>! Trap on hard-fail. Delay further on soft-fail. Do nothing on success. Perl <a href="http://search.cpan.org/dist/Mail-SPF/" target="_blank">Mail::SPF</a>.</li>
</ul>
<strong>to &amp; source ip: </strong>["We have a connection from IP address __.__.__.__ trying to email mailbox ______. Based solely on this, what should we do?"]
<ul>
	<li>The most I can think of here would be to use geolocation for certain recipients. The Asia-Pacific Sales Office mailbox might get a lot of new mail from China and Korea, while the Chicago Office Softball Team mailbox probably wouldn't. There's too much admin overhead, though, for a big company.</li>
</ul>
<strong>source ip &amp; first: </strong>["We have a new connection from IP address __.__.__.__ at time __:__:__. Based solely on these two things, what should we do?"]
<ul>
	<li>And the most I can think of here would be geolocation, plus timezone offsets. Would this be normal operating times for the sender? That is, if it's 3:00 a.m. in the UK, chances are we can extend the <em>passtime</em> on this from @co.uk for a while.  Clunky.  My 1and1.com account is hosted in Germany, though I'm in US/Central, so sender IP doesn't necessarily correspond directly to the sender's actual location.  Can't see actually doing this.</li>
</ul>
<strong>from &amp; to &amp; source ip: </strong>["We have a connection from IP address __.__.__.__ trying to send mail to ______ from _____.  Based on these three things, what should we do?"]
<ul>
	<li>This is the 'tuple' of greylisting.  If they try again after such and such a time, whitelist them.</li>
</ul>
<strong>source ip &amp; from &amp; first:</strong> ["IP address __.__.__.__ is sending mail from ______ for the first time at __:__:__.  Based on these three things, what should we do?"]
<ul>
	<li>Nothing I can think of.</li>
</ul>
<strong>source ip &amp; to &amp; first: </strong> ["IP address __.__.__.__ is sending mail to mailbox _______ for the first time at __:__:__.  Based solely on these three things as a group, what should we do?"]
<ul>
	<li>Well, using geolocation and timezone offsets (as above), see if it's reasonable for the sender to be sending at this time, especially to: this mailbox.  For instance, it's 9:00 a.m. in Beijing, where this IP address 'resolves', and asia-sales or asia-support would be reasonable recipients.  Otherwise, extend the greylist <em>passtime</em>.  Another clunky one.  But this is just brainstorming possibilities.....  You actually read down this far?  I'm flattered.</li>
</ul>
<strong>source ip &amp; to &amp; from &amp; first: </strong> ["IP address __.__.__.__ is sending mail from ______ to _______ for the first time at __:__:__.  Based solely on these four things as a group, what should we do?"]
<ul>
	<li>Nothing I can think of.</li>
</ul>
<strong>from &amp; to</strong>: ["We have a new connection trying to send mail from _______ to ________.  Knowing only the from: and to:, what should we do?"]
<ul>
	<li>And this would be personal whitelisting.... Clunky and cumbersome and way too much overhead. I can't think of anything that would easily be automated as a rule.</li>
</ul>
<strong>from &amp; first: </strong>["We have a message from _______ being sent at __:__:__. Based solely on these two criteria, what should we do?"]
<ul>
	<li>Nothing I can think of.</li>
</ul>
<strong>from &amp; to &amp; first:</strong> ["We have a message from _______ to ______ being sent at __:__:__.  Based solely on these three criteria, what should we do?"]
<ul>
	<li>Nothing requiring all three.</li>
</ul>
<strong>to &amp; first:</strong> ["We have a message to _______ being sent at __:__:__. Based solely on these two criteria, what should we do?"]
<ul>
	<li>This would be a more personalized version of the business hours scenario. We're seeing mail for the very first time from a previously unknown IP address, sent to bob@example.com.  Now, Bob works days (8:00a.m. to 5:00p.m., Monday-Friday). If the mail is sent at 6:00p.m. (Bob Time), he's not going to see it for another fourteen hours anyway.  Extend the greylisting time as far as reasonably possible so that if the sender is good, the message will be delivered before Bob comes to work in the morning.  If the mail is sent at 7:30a.m., well just use the default 26 minutes, because he'll be in shortly thereafter.</li>
</ul>
And that's all I have at the moment.....
 

</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>82</wp:post_id>
		<wp:post_date>2007-01-21 03:23:54</wp:post_date>
		<wp:post_date_gmt>2007-01-21 07:23:54</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>brainstorming-spamd-greylisting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="computers"><![CDATA[Computers]]></category>
		<category domain="category" nicename="main"><![CDATA[Main]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>

				<title>Kyrie Eleison</title>
		<link>http://www.snakelegs.org/kyrie-eleison/</link>
		<pubDate>Sat, 10 Feb 2007 08:34:23 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.snakelegs.org/2007/02/10/kyrie-eleison/</guid>
		<description></description>
		<content:encoded><![CDATA[The "Gregorian Chant" CD, from the Monks Of The Abbey Of Notre Dame, is one of my constant companions. <a href="http://en.wikipedia.org/wiki/Kyrie_Eleison" target="_blank"><em>Kyrie Eleison</em></a> is the most memorable piece. Very pretty.

This is a minimalist banjo version, with just a cheap mic hooked up to the computer.  So the sound quality isn't great -- just imagine it's an old Folkways recording.

<a title="Kyrie Eleison (MP3)" href="http://www.snakelegs.org/wp-content/uploads/2007/02/kyrie_eleison.mp3">Kyrie Eleison (MP3)</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>95</wp:post_id>
		<wp:post_date>2007-02-10 04:34:23</wp:post_date>
		<wp:post_date_gmt>2007-02-10 08:34:23</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>kyrie-eleison</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="main"><![CDATA[Main]]></category>
		<category domain="category" nicename="music"><![CDATA[Music]]></category>
		<wp:postmeta>
			<wp:meta_key>enclosure</wp:meta_key>
			<wp:meta_value><![CDATA[http://www.snakelegs.org/wp-content/uploads/2007/02/kyrie_eleison.mp3
2127038
audio/x-mpeg
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Sleepers Awake!</title>
		<link>http://www.snakelegs.org/sleepers-awake/</link>
		<pubDate>Mon, 12 Feb 2007 05:55:43 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.snakelegs.org/2007/02/12/sleepers-awake/</guid>
		<description></description>
		<content:encoded><![CDATA[Here's a 5-string banjo version of (more or less) Bach's <a href="http://en.wikipedia.org/wiki/Wachet_auf,_ruft_uns_die_Stimme" target="_blank">Wachet auf, ruft uns die Stimme</a> -- Sleepers Awake! (BWV 140).  <em>The whole cantata is available for free download at the Wikipedia link above (this is from the 4th movement).</em>

I've been poking around at this for a while, but nobody else in the family likes hearing me practice.  So, this is from sneaking picking time.  It's not a full rendition, but the two major themes are there.  And I don't know why, but the microphone makes me nervous, and all that. Here it is.  Next on my list is <a href="http://en.wikipedia.org/wiki/Jesu_Joy" target="_blank">Jesu, Joy of Man's Desiring</a>.

<a title="Sleepers Awake!" href="http://www.snakelegs.org/wp-content/uploads/2007/02/sleepers_awake.mp3">Sleepers Awake! (MP3)</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>97</wp:post_id>
		<wp:post_date>2007-02-12 01:55:43</wp:post_date>
		<wp:post_date_gmt>2007-02-12 05:55:43</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>sleepers-awake</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="main"><![CDATA[Main]]></category>
		<category domain="category" nicename="music"><![CDATA[Music]]></category>
		<wp:postmeta>
			<wp:meta_key>enclosure</wp:meta_key>
			<wp:meta_value><![CDATA[http://www.snakelegs.org/wp-content/uploads/2007/02/sleepers_awake.mp3
3746014
audio/x-mpeg
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
				<title>Decoding Borderware MXtreme archive Subject: lines</title>
		<link>http://www.snakelegs.org/decoding-borderware-mxtreme-archive-subject-lines/</link>
		<pubDate>Thu, 05 Apr 2007 18:58:16 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.snakelegs.org/2007/04/05/decoding-borderware-mxtreme-archive-subject-lines/</guid>
		<description></description>
		<content:encoded><![CDATA[Alvin Fernald lives!  Get thee to an order form and pick up <a href="http://www.amazon.com/Alvins-Secret-Code-Panel-Mysteries/dp/1932350004/ref=sr_1_1/103-5481089-9202231?ie=UTF8&amp;s=books&amp;qid=1175797023&amp;sr=8-1">Alvin's Secret Code</a>, by Clifford B. Hicks.  Fond childhood memories, there.  All the Alvin books rock.

Well, here's a quick Perl script to decode the Subject: lines in archived maillogs from <a href="http://www.borderware.com/products/mxtreme/">Borderware MXtreme mail firewalls</a>.  Simple substitution.  Nothing fancy.  Adjust to taste.  Doesn't do any MIME decoding.

<a title="mxdecpl.txt" href="http://www.snakelegs.org/wp-content/uploads/2007/04/mxdecpl.txt">mxdecpl.txt</a> (rename to mxdec.pl -- added .txt extension because I'm too ... to fight WordPress' security settings)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>107</wp:post_id>
		<wp:post_date>2007-04-05 14:58:16</wp:post_date>
		<wp:post_date_gmt>2007-04-05 18:58:16</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>decoding-borderware-mxtreme-archive-subject-lines</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="computers"><![CDATA[Computers]]></category>
		<category domain="category" nicename="main"><![CDATA[Main]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>

				<title>Funetik alfabet for tek support</title>
		<link>http://www.snakelegs.org/funetik-alfabet-for-tek-support/</link>
		<pubDate>Tue, 24 Apr 2007 06:33:20 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.snakelegs.org/2007/04/24/funetik-alfabet-for-tek-support/</guid>
		<description></description>
		<content:encoded><![CDATA[When you get bored talking to tech support and have to read off serial numbers....

A again
B back
C champagne
D double
E eye
F finally
G gnaw
H heiress
I ink
J Jose
K knife
L line
M mnemonic
N number
O over
P phantom
Q quiche
R repeat
S skip
T triple
U unreadable
V verbose
W wrong
X Xerox
Y yes
Z zed

"F" was "five," but I reconsidered that cheating and changed it. The basic guide is that the initial letter shouldn't sound like familiar sounds for that letter ("P" = "phantom"), no foreign words ("Jose" is acceptable, though, by fiat), and if those aren't possible, then just make it as confusing as possible as though you were reading a serial number ("T" = "triple").

So MIDYE5I2USS becomes: mnemonic ink double yes eye FIVE ink 2 unreadable skip skip.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>121</wp:post_id>
		<wp:post_date>2007-04-24 02:33:20</wp:post_date>
		<wp:post_date_gmt>2007-04-24 06:33:20</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>funetik-alfabet-for-tek-support</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="computers"><![CDATA[Computers]]></category>
		<category domain="category" nicename="main"><![CDATA[Main]]></category>
	</item>
	<item>
				<title>Leaving Las Vegas</title>
		<link>http://www.snakelegs.org/leaving-los-vegas/</link>
		<pubDate>Sun, 18 Nov 2007 07:45:38 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.snakelegs.org/2007/11/18/leaving-los-vegas/</guid>
		<description></description>
		<content:encoded><![CDATA[<em><a href="http://imdb.com/title/tt0113627/">Leaving Las Vegas</a></em> is a movie about what would happen if someone hired Nicolas Cage to pretend to be a drunk.  Elisabeth Shue half redeems the movie.

This is a strange Subtitle Goof -- it's not a goof.  The goof is with the caption, an English translation from the Latvian pimp patrol.  The subtitle actually corrects the caption.
<p style="text-align: center;"><a title="Leaving Los Vegas" href="http://www.snakelegs.org/wp-content/uploads/2007/11/leaving_los_vegas.jpg"><img src="http://www.snakelegs.org/wp-content/uploads/2007/11/leaving_los_vegas.thumbnail.jpg" alt="Leaving Las Vegas" /></a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>139</wp:post_id>
		<wp:post_date>2007-11-18 03:45:38</wp:post_date>
		<wp:post_date_gmt>2007-11-18 07:45:38</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>leaving-los-vegas</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="main"><![CDATA[Main]]></category>
		<category domain="category" nicename="subtitles"><![CDATA[Subtitle Goofs]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>

	<item>
				<title>convert ListProc subscription file to LISTSERV input</title>
		<link>http://www.snakelegs.org/convert-listproc-subscription-file-to-listserv-input/</link>
		<pubDate>Sat, 12 Jan 2008 16:00:38 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.snakelegs.org/2008/01/12/convert-listproc-subscription-file-to-listserv-input/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Convert <a href="http://sourceforge.net/projects/listproc/">ListProc</a> .subscribers file to format suitable for emailing in a <a href="http://www.lsoft.com">LISTSERV</a> //JOB .</p>
<p><a href='http://www.snakelegs.org/wp-content/uploads/2008/01/convert_subscriberspl.txt' title='convert_subscriberspl.txt'>convert_subscriberspl.txt</a></p>

<!--more-->

<pre lang="perl">
#!/usr/bin/perl -T

# Copyright (c) 2007 Jason Filley jason@snakelegs.org
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

# usage: perl -T convert_subscribers.pl LISTNAME-L < .subscribers
#
# input is a ListProc subscription file (6.0c tested).  Note that
# LISTERV command batches must be under 1MB, so for large lists, 
# you'll need to split the email messages up.

use strict;
use warnings;
use Email::Valid;

my $LISTSERV;
my $LISTSERVoptions;
my $listname = $ARGV[0];

while (<STDIN>) {

	chomp $_;

	# Listproc subscription
	# 	EMAILADDRESS@EXAMPLE.COM
	#	[ACK,NOACK,DIGEST,POSTPONE]
	# 	SUBSCRIPTION DATE 
	#	CONCEAL=(YES|NO)
	#   SOME.BODY@EXAMPLE.COM ACK 1063657245 NO Some Body Special
	my @ListProc = split(/ /, $_, 5);

	my $emailaddress = lc($ListProc[0]);
	my $option = $ListProc[1];
	my $subscriptiondate = $ListProc[2];
	my $concealment = $ListProc[3];
	my $name = $ListProc[4];

	if (Email::Valid->address("$emailaddress")) {

		my $LISTSERV = "QUIET ADD $listname $emailaddress";
		if ($name) {$LISTSERV .= " $name";} print "$LISTSERV\n";
	
		if ($option eq 'ACK') {$LISTSERVoptions = "REPRO"} 
		elsif ($option eq 'NOACK') {$LISTSERVoptions = "NOREPRO"} 
		elsif ($option eq 'DIGEST') {$LISTSERVoptions = "DIGEST"}
		elsif ($option eq 'POSTPONE') {$LISTSERVoptions = "NOMAIL"}
		else {print STDERR "option:$listname:bad option $option:for $emailaddress\n";}

		$LISTSERVoptions = "QUIET SET $listname $LISTSERVoptions FOR $emailaddress";
		print "$LISTSERVoptions\n";

	} else {
		print STDERR "email:$listname:bad address $emailaddress for $name\n";
	}
}
</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>152</wp:post_id>
		<wp:post_date>2008-01-12 12:00:38</wp:post_date>
		<wp:post_date_gmt>2008-01-12 16:00:38</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>convert-listproc-subscription-file-to-listserv-input</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="computers"><![CDATA[Computers]]></category>
		<category domain="category" nicename="main"><![CDATA[Main]]></category>
	</item>

	<item>
				<title>Double Metaphone - Visual Basic Implementation</title>
		<link>http://www.snakelegs.org/double-metaphone-visual-basic-implementation/</link>
		<pubDate>Fri, 18 Jan 2008 04:29:37 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.snakelegs.org/2008/01/18/double-metaphone-visual-basic-implementation/</guid>
		<description></description>
		<content:encoded><![CDATA[<a href='http://www.snakelegs.org/wp-content/uploads/2008/01/double_metaphone_visual_basic.zip' title='double_metaphone_visual_basic.zip'>Visual Basic implementation</a> of <a href="http://en.wikipedia.org/wiki/Double_Metaphone">Double Metaphone</a>.  I posted it to <a href="http://www.planetsourcecode.com/vb/scripts/ShowCode.asp?txtCodeId=36526&lngWId=1#zip">Planet Source Code</a> several years back, but I want a local copy.....]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>156</wp:post_id>
		<wp:post_date>2008-01-18 00:29:37</wp:post_date>
		<wp:post_date_gmt>2008-01-18 04:29:37</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>double-metaphone-visual-basic-implementation</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="computers"><![CDATA[Computers]]></category>
		<category domain="category" nicename="main"><![CDATA[Main]]></category>
	</item>
				<title>Venezuelan Hot Dogs</title>
		<link>http://www.snakelegs.org/venezuelan-hot-dogs/</link>
		<pubDate>Tue, 04 Mar 2008 20:26:14 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.snakelegs.org/2008/03/04/venezuelan-hot-dogs/</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.foodnetwork.com/food/recipes/recipe/0,1977,FOOD_9936_32819,00.html">Yummy recipe</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>166</wp:post_id>
		<wp:post_date>2008-03-04 16:26:14</wp:post_date>
		<wp:post_date_gmt>2008-03-04 20:26:14</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>venezuelan-hot-dogs</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="main"><![CDATA[Main]]></category>
		<category domain="category" nicename="recipes"><![CDATA[Recipes]]></category>
	</item>

				<title>Document Format Conversion at the Gateway</title>
		<link>http://www.snakelegs.org/document-format-conversion-at-the-gateway/</link>
		<pubDate>Thu, 15 May 2008 06:07:40 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.snakelegs.org/?p=187</guid>
		<description></description>
		<content:encoded><![CDATA[Corporate mail should be filtered for viruses and spam at the gateway -- that's just a given.  It's much more efficient to filter incoming email in one spot than to check it at 300 or 25000 desktops.  Web browsers should go through a scanning, filtering proxy.  Again, it's much simpler to secure and maintain.

So, what if you have a corporate standard document format and don't want the cascading issues with users receiving and opening/converting/saving non-standard files?  Wouldn't it make sense to convert the document on the way in?

A rules-based system makes sense.

Consider a <a href="mailto:resumes@example.com">resumes@example.com</a> address that receives resume submissions for HR.  You do <em>not</em> want HR bugging you about weird documents.  I'd set a rule that any attachment (Microsoft Word .doc, <a href="http://www.microsoft.com/downloads/details.aspx?FamilyID=9b16eb3c-6df6-4545-89ff-05c627fba36b&amp;displaylang=en">Microsoft Works document</a> .wps, RTF, OpenDocument, etc.,) gets automatically converted to PDF -- they're resumes to be read or printed, and should be read-only.  Email gets scanned, attachments are analyzed and extracted, attachments are converted and reinserted, a note is added that it was automatically converted and the archive document is at such and such for so long if there are problems, and thank you.

Rules wouldn't be terribly complicated, either.  Off the top of my head:
<ul>
	<li>All Postscript (*.ps) convert to PDF.  Simple.</li>
	<li>Pass all compressed (*.zip, *.gz, *.bz2, etc) unmodified.</li>
	<li>Convert to <a href="http://en.wikipedia.org/wiki/Office_Open_XML">Open Office XML</a> all (*.doc, *.wps, *.rtf, WordPerfect, and other text formats).</li>
	<li>Same goes for Lotus 1-2-3 docs and kin.</li>
	<li>Image formats convert to PNG.  Example, with rule that the Graphics department is exempt.</li>
	<li>And so forth....</li>
</ul>
I haven't checked the <a href="http://support.microsoft.com/kb/212265">Microsoft Office</a> license, but I'm pretty sure you'd only need one licensed copy for the gateway, so I'll check.  Image conversion is simple enough, using <a href="http://www.imagemagick.org/script/formats.php">ImageMagick</a>, <a href="http://pagesperso-orange.fr/pierre.g/xnview/enformats.html">NConvert</a>, and <a href="http://www.libpng.org/pub/png/pngapcv.html">others</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>187</wp:post_id>
		<wp:post_date>2008-05-15 02:07:40</wp:post_date>
		<wp:post_date_gmt>2008-05-15 06:07:40</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>document-format-conversion-at-the-gateway</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="computers"><![CDATA[Computers]]></category>
		<category domain="category" nicename="main"><![CDATA[Main]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
				<title>One More Thing for the Resume</title>
		<link>http://www.snakelegs.org/one-more-thing-for-the-resume/</link>
		<pubDate>Mon, 11 Aug 2008 01:31:07 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.snakelegs.org/?p=206</guid>
		<description></description>
		<content:encoded><![CDATA[Just saw a Coke commercial that said if I have had a Coke within the last 80 years (which I have), then I've had a hand in making every Olympic dream come true.  I'm going to add that to my resume.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>206</wp:post_id>
		<wp:post_date>2008-08-10 19:31:07</wp:post_date>
		<wp:post_date_gmt>2008-08-11 01:31:07</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>one-more-thing-for-the-resume</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="main"><![CDATA[Main]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
				<title>Flash Performance on Terminal Services RDP</title>
		<link>http://www.snakelegs.org/flash-performance-on-terminal-services-rdp/</link>
		<pubDate>Tue, 14 Oct 2008 15:05:41 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.snakelegs.org/?p=224</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>The Problem</strong>

Multimedia performance over RDP on WAN links is suboptimal.  Users will complain of the painfully slow rendering of Flash-enabled websites.  Internet Explorer will block, so that you can't scroll the browser window while Flash images are being rendered.

If you're the Fed and can print your own money, <a href="http://www.citrix.com/English/ps2/accessAnswers/challenge.asp?contentID=25655&amp;tabID=S">Citrix's Speedscreen Multimedia Acceleration </a>can help.

Provision Networks, owned by Quest, has an <a href="http://blogs.inside.quest.com/provision/2008/08/26/provision-networks-provides-8x-compression-for-rdp/">RDP optimization pack</a> forthcoming.

Microsoft acquired Calista Technologies in January '08.  Calista's technology looks impressive and should dramatically improve multimedia performance.  With Virtualization all the rage these days, if you can't display a training video or browse websites, it's pretty useless, whether you're using Terminal Services or just XP/Vista via VDI.  I myself prefer Terminal Services with Softgrid/App-V, which abstracts everything.

Citrix and Provision Networks price their products like this is 1998, instead of 2008 -- they're priced way out of their range.

Having the Calista technology delivered by Microsoft is what's preferred, but there are no public details or roadmap.

<strong>Cheap Solution</strong>

So, the cheap, sure-fire way to improve browser performance for Flash-enabled websites is [as many individual web browsers have done]: just block Flash.  It's all crap anyway.  Annoying.  Zero-content.  Distracting.  Even if they're on business-related websites, they're mostly useless.

Set your browsers to use a <a href="http://www.squid-cache.org/">Squid cache</a>, as a general rule.

Then use <a href="http://adzapper.sourceforge.net/">AdZapper</a> with Squid, to block egregious ads, including Flash.  When a .swf file matches a given regex, a blank .swf is substituted for it, showing just a white box.  AdZapper is ridiculously easy to install, being a Perl script with a few content items (fake images, Flash, mp3).

Then, if you're using Internet Explorer, load <a href="http://www.ie7pro.com/ad-blocker.html">IE7Pro</a> to block the remainders and let the user selectively enable them.  Firefox users can use <a href="http://flashblock.mozdev.org/">FlashBlock</a>.

This solution is quick and cheap.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>224</wp:post_id>
		<wp:post_date>2008-10-14 09:05:41</wp:post_date>
		<wp:post_date_gmt>2008-10-14 15:05:41</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>flash-performance-on-terminal-services-rdp</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="computers"><![CDATA[Computers]]></category>
		<category domain="category" nicename="main"><![CDATA[Main]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
				<title>Colby Jack, Ham, and Broccoli Wontons</title>
		<link>http://www.snakelegs.org/colby-jack-ham-and-broccoli-wontons/</link>
		<pubDate>Thu, 01 Jan 2009 18:26:50 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.snakelegs.org/?p=241</guid>
		<description></description>
		<content:encoded><![CDATA[Dave's famous recipe!

<!--more-->

<strong>Ingredients:</strong>
<ul>
	<li>24 wonton wrappers</li>
	<li>Nonstick cooking spray</li>
	<li>2 eggs</li>
	<li>1/2 cup heavy cream</li>
	<li>1/2 teaspoon salt</li>
	<li>1/4 teaspoon freshly ground pepper</li>
	<li>1/3 cup (2 oz.) finely diced smoked ham</li>
	<li>1/4 teaspoon hot pepper sauce</li>
	<li>1/3 cup (2 oz.) chopped frozen broccoli, thawed and drained</li>
	<li>12 slices Colby Jack cheese, cut in quarters</li>
</ul>
<strong>Directions:</strong>
<ol>
	<li>Preheat oven to 350 degrees.</li>
	<li>Spray a nonstick mini muffin tin with cooking spray.  Press a single wonton wrapper into each mold.</li>
	<li>In a large bowl, which eggs, heavy cream, salt and pepper, ham, hot pepper sauce, and broccoli until evenly incorporated.</li>
	<li>Place two Colby Jack cheese quarters in each wonton wrapper.  Pour egg filling into wonton cupss until it is level with the cheese.  Bake for 10 to 15 minutes or until the egg mixture is set and wontons are golden brown.</li>
</ol>
<em>Makes 24 wontons</em>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>241</wp:post_id>
		<wp:post_date>2009-01-01 12:26:50</wp:post_date>
		<wp:post_date_gmt>2009-01-01 18:26:50</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>colby-jack-ham-and-broccoli-wontons</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="main"><![CDATA[Main]]></category>
		<category domain="category" nicename="recipes"><![CDATA[Recipes]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Backing up Fortinet firewalls</title>
		<link>http://www.snakelegs.org/backing-up-fortinet-firewalls/</link>
		<pubDate>Fri, 25 Sep 2009 14:30:24 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.snakelegs.org/?p=280</guid>
		<description></description>
		<content:encoded><![CDATA[The cheap way to automate Fortinet firewall backups is:
<ol>
	<li> Enable SSH on the firewall.</li>
	<li>Enable SCP (System -&gt; Admin -&gt; Settings -&gt; Enable SCP)</li>
	<li>Create a 'backup' admin user with read_only profile.</li>
	<li>Run a script to scp the configs.</li>
</ol>
Uses <a href="http://search.cpan.org/~rybskej/Net-SCP-Expect-0.16/Expect.pm">Net::SCP::Expect</a>
<pre>#!/usr/bin/perl -w

use warnings;
use Net::SCP::Expect;

@firewallips = ('192.168.1.1',
 '192.168.2.1',
 '192.168.3.1',
 '192.168.4.1',
 '192.168.5.1',
 '192.168.6.1'
);

foreach $ip (@firewallips) {
 print "$ip\n";

 my $scpe = Net::SCP::Expect-&gt;new(auto_yes=&gt;1);
 $scpe-&gt;login('backup', 'SUPERSECRET');
 $scpe-&gt;scp("$ip:sys_config","/home/fortinetbackups/fortinet-$ip\.conf");

}</pre>
Or you could do it <a href="http://www.nullamatix.com/howto-fortinet-public-key-authentication-for-scp-config-backups/">this way</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>280</wp:post_id>
		<wp:post_date>2009-09-25 08:30:24</wp:post_date>
		<wp:post_date_gmt>2009-09-25 14:30:24</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>backing-up-fortinet-firewalls</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="computers"><![CDATA[Computers]]></category>
		<category domain="category" nicename="main"><![CDATA[Main]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Audio Redirection in Windows Terminal Server</title>
		<link>http://www.snakelegs.org/audio-redirection-in-windows-terminal-server/</link>
		<pubDate>Mon, 26 Oct 2009 21:15:52 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.snakelegs.org/?p=286</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Problem</strong>

Windows 2003 terminal servers wouldn't allow audio redirection over RDP.

Client: Windows XP SP3 w/ RDP 6.1 client (6.0.6001).

Servers:  Windows 2003 Standard R2 (32-bit) , SP2, all current patches.

Servers are in "Terminal Services" OU that sets group policy "Allow audio redirection = Enabled."  Viewing in RSOP MMC confirms that the setting is applied.

gpresult /v:

GPO: Terminal Server Test
KeyName:     SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services\fDisableCam
Value:       0, 0, 0, 0
State:       Enabled

HKLM\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services\fDisableCam == 0

Connect via RDP.  Open Control Panel -&gt; Sounds and Audio Devices.  Uncheck "Mute" and click "Apply."  "Mute" is checked again.

Clicking "Advanced" under "Speaker Settings" results in error "DirectSound settings not available."

Similar

<a href="http://social.technet.microsoft.com/Forums/en-US/winserverTS/thread/42930f70-a68a-4397-8c61-7d2017a4988b/">http://social.technet.microsoft.com/Forums/en-US/winserverTS/thread/42930f70-a68a-4397-8c61-7d2017a4988b/</a>

<a href="http://www.virtualpcfaq.com/Virtual_Server_2005/rn-738-15532_DirectSound_settings_not_available.aspx">http://www.virtualpcfaq.com/Virtual_Server_2005/rn-738-15532_DirectSound_settings_not_available.aspx</a>

<strong>Solution</strong>

RDPCLIP.EXE wasn't running.

<img class="aligncenter size-large wp-image-287" title="It's always a checkbox...." src="http://www.snakelegs.org/wp-content/uploads/2009/10/always_a_checkbox-1024x223.png" alt="It's always a checkbox...." width="740" height="161" />

I didn't realize that rdpclip.exe was needed for audio redirection and must have unloaded it when trimming startup programs to lower cpu/memory.  I had already disabled clipboard redirection to speed things up, so I figured there was no need to run rdpclip.exe, which, as the name implies, was originally a Windows 2000 resource kit utility to allow copying and pasting files between client and server.  My kingdom for an architecture diagram....]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>286</wp:post_id>
		<wp:post_date>2009-10-26 15:15:52</wp:post_date>
		<wp:post_date_gmt>2009-10-26 21:15:52</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>audio-redirection-in-windows-terminal-server</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="computers"><![CDATA[Computers]]></category>
		<category domain="category" nicename="main"><![CDATA[Main]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Convert SOA RNAME to standard email format</title>
		<link>http://www.snakelegs.org/convert-soa-rname-to-standard-email-format/</link>
		<pubDate>Thu, 03 Dec 2009 16:22:56 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.snakelegs.org/?p=307</guid>
		<description></description>
		<content:encoded><![CDATA[<pre><tt><em><span style="color: #9a1900;">#!/usr/bin/perl -T</span></em>
<em><span style="color: #9a1900;"># RFC 1035 3.3.13</span></em>
<em><span style="color: #9a1900;"># http://www.faqs.org/rfcs/rfc1035.html</span></em>
<em><span style="color: #9a1900;"># The rname of a DNS SOA response gives "domain-name which specifies \</span></em>
<em><span style="color: #9a1900;">#       the mailbox of the person responsible for this zone"</span></em>

<strong><span style="color: #0000ff;">use</span></strong> strict<span style="color: #990000;">;</span>
<strong><span style="color: #0000ff;">use</span></strong> warnings<span style="color: #990000;">;</span>
<em><span style="color: #9a1900;">#use Email::Valid; if you wish</span></em>

<em><span style="color: #9a1900;"># example - "noc.example.com" is "noc@example.com"</span></em>
<em><span style="color: #9a1900;"># replace first non-escaped period with an @ symbol</span></em>
<span style="color: #990000;">&amp;</span><strong><span style="color: #000000;">mailstrip</span></strong><span style="color: #990000;">(</span><span style="color: #ff0000;">"noc.example.com"</span><span style="color: #990000;">);</span>

<em><span style="color: #9a1900;"># and remove escapes</span></em>
<em><span style="color: #9a1900;">#&amp;mailstrip('some\.user.example.com');</span></em>

<strong><span style="color: #0000ff;">sub</span></strong> mailstrip <span style="color: #ff0000;">{</span>
    <strong><span style="color: #0000ff;">my</span></strong> <span style="color: #009900;">$emailaddress</span> <span style="color: #990000;">=</span> <strong><span style="color: #0000ff;">shift</span></strong><span style="color: #990000;">;</span>

    <em><span style="color: #9a1900;"># replace first non-escaped period with an @ symbol</span></em>
    <em><span style="color: #9a1900;"># my $brain-&gt;hurts();</span></em>
    <span style="color: #009900;">$emailaddress</span> <span style="color: #990000;">=~</span> <strong><span style="color: #0000ff;">s</span></strong><span style="color: #ff6600;">/(?&lt;!\\)(?=\.)/\@/</span><span style="color: #990000;">;</span>
    <span style="color: #009900;">$emailaddress</span> <span style="color: #990000;">=~</span> <strong><span style="color: #0000ff;">s</span></strong><span style="color: #ff6600;">/\@\./\@/</span><span style="color: #990000;">;</span>
    <span style="color: #009900;">$emailaddress</span> <span style="color: #990000;">=~</span> <strong><span style="color: #0000ff;">s</span></strong><span style="color: #ff6600;">/\\(.)/$1/</span><strong><span style="color: #0000ff;">g</span></strong><span style="color: #990000;">;</span>

    <strong><span style="color: #0000ff;">print</span></strong> <span style="color: #ff0000;">"$emailaddress\n"</span><span style="color: #990000;">;</span>
<span style="color: #ff0000;">}</span>
</tt></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>307</wp:post_id>
		<wp:post_date>2009-12-03 10:22:56</wp:post_date>
		<wp:post_date_gmt>2009-12-03 16:22:56</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>convert-soa-rname-to-standard-email-format</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="computers"><![CDATA[Computers]]></category>
		<category domain="category" nicename="main"><![CDATA[Main]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>

	<item>
				<title>Jerome&#039;s Office-Winning Chili</title>
		<link>http://www.snakelegs.org/jeromes-office-winning-chili/</link>
		<pubDate>Sun, 03 Jan 2010 01:20:55 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.snakelegs.org/?p=323</guid>
		<description></description>
		<content:encoded><![CDATA[Ingredients
<ul>
	<li>1 1/2 lbs ground beef</li>
	<li>1 onion chopped</li>
	<li>2 Tsp sugar</li>
	<li>3/4 Tsp black pepper</li>
	<li>1/2 cup chopped green bell pepper</li>
	<li>1/2 cup chopped red bell pepper</li>
	<li>4 Tlb chili powder</li>
	<li>2 Tsp garlic powder</li>
	<li>1 15oz diced tomato with green chiles</li>
	<li>1 15oz can crushed tomatoes</li>
	<li>5 15oz can chili beans</li>
	<li>1 package chili mix</li>
</ul>
 Directions

Cook ground beef with onions, peppers, garlic powder, pepper and season salt (mystery ingredient?).

Drain and add dash of chili powder.

Add chili mix with beans and warm on low heat.  Add sugar and pepper.  Cook 10 minutes.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>323</wp:post_id>
		<wp:post_date>2010-01-02 19:20:55</wp:post_date>
		<wp:post_date_gmt>2010-01-03 01:20:55</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>jeromes-office-winning-chili</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="main"><![CDATA[Main]]></category>
		<category domain="category" nicename="recipes"><![CDATA[Recipes]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Cryptoclans</title>
		<link>http://www.snakelegs.org/cryptoclans/</link>
		<pubDate>Thu, 19 Aug 2010 18:53:45 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.snakelegs.org/?p=415</guid>
		<description></description>
		<content:encoded><![CDATA[Cryptoclans rock.

This Perl script takes as input a pipe-delimited file where:
<ul>
	<li>each line is a puzzle</li>
	<li>the first field is the topic</li>
	<li>each additional field is an item</li>
</ul>
Try it with family member names, favorite meals, old pets, whatever.  Note that a character might be the same in plaintext and ciphertext.  I may change that later.

Download  <a href="http://www.snakelegs.org/cryptoclans.txt">cryptoclans.txt</a>

<!--more-->

[perl]
#!/usr/bin/perl -T

# Copyright (c) 2010 Jason Filley jason@snakelegs.org
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED &quot;AS IS&quot; AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
# Purpose: create cryptoclans
# Usage:  create a pipe-delimited file with the first field being the topic,
#       and each additional field is the item.
# cat yourfile.txt | cryptoclans.pl
#
# Example:
# Pets|dog|cat|fish|parakeet|lemur|skunk|guinea pig|iguana
# Car Make|Ford|Dodge|Chrysler|Toyota|Honda|Hyundai|Jeep
# Dog Breeds|Sheltie|Boxer|German Shepherd|Poodle|Rottweiler|Australian Terrier|Whippet

use List::Util 'shuffle';

my $AllowedLetters = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;
my $AllowedPunctuation = &quot; \&quot;'-&quot;;

while (&lt;STDIN&gt;) {

 my @line = split( '\|', $_ );
 $topic = shift(@line);

 # Create ciphertext alphabet
 @ciphertext = split '', $AllowedLetters;
 @ciphertext = shuffle(@ciphertext);
 my $cipher = join '', @ciphertext;
 my @outlist = ();

 print &quot;$topic\n&quot;;
 print(&quot;-&quot; x length ($topic));
 print &quot;\n&quot;;

 foreach $item (@line) {
     $item = uc($item);
     chomp $item;

     $output = &quot;&quot;;

     foreach my $byte ( split //, $item ) {

         if ( $AllowedPunctuation =~ /$byte/ ) {
             $output .= $byte;

         } elsif ( $AllowedLetters =~ /$byte/ ) {
             #find its index in the plaintext array
             $index = index( $AllowedLetters, $byte );

             #find the ciphertext character with the same index
             $char = substr( $cipher, $index, 1);
             $output .= $char;
         } else {
             die &quot;Bad character in input!\n&quot;; }
         }

         push @outlist, &quot;$output&quot;;
    }

    print map { &quot;$_ \n&quot; } @outlist;
    print &quot;\n\n&quot;;
}
[/perl]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>415</wp:post_id>
		<wp:post_date>2010-08-19 12:53:45</wp:post_date>
		<wp:post_date_gmt>2010-08-19 18:53:45</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>cryptoclans</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="main"><![CDATA[Main]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[crytoclans]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>One Page Technical Resume/CV LaTeX/XeTeX template</title>
		<link>http://www.snakelegs.org/one-page-technical-resumecv-latexxetex-template/</link>
		<pubDate>Sat, 08 Jan 2011 03:08:17 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.snakelegs.org/?p=440</guid>
		<description></description>
		<content:encoded><![CDATA[Here's a one-page technical resume/CV template in LaTeX (<a href="http://scripts.sil.org/xetex">XeTeX</a>, more precisely).  It's an exercise in brevity.  Ain't <a href="http://new.myfonts.com/fonts/exljbris/calluna/">Calluna</a> purdy?

<a href="http://www.snakelegs.org/1-page-technical-cv.pdf">PDF</a> - <a href="http://www.snakelegs.org/1-page-technical-cv.tex">TeX</a> - <a href="http://www.snakelegs.org/1-page-technical-cv.zip">ZIP</a>
<ul></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>440</wp:post_id>
		<wp:post_date>2011-01-07 21:08:17</wp:post_date>
		<wp:post_date_gmt>2011-01-08 03:08:17</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>one-page-technical-resumecv-latexxetex-template</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="main"><![CDATA[Main]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>RDP Cookies</title>
		<link>http://www.snakelegs.org/rdp-cookies-2/</link>
		<pubDate>Sun, 06 Feb 2011 23:02:31 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.snakelegs.org/?p=445</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Overview</h1>
Windows terminal server (remote desktop session host) environments needing load balancing and high availability may use 3rd-party load balancers to distribute initial connections and persist further network connections. Load balancers utilize RDP cookies -- short text strings sent by RDP clients in initial connection requests.

Native Windows functionality may be sufficient for some needs, say by creating a terminal server farm and using round-robin DNS to distribute initial connections ("Poor Man's Load Balancing").  For example, given three terminal servers (TERM{1,2,3}) with IP addresses 10.10.10.{1,2,3}, the administrator would publish a DNS A record (e.g., "TERMFARM") with the multiple IP addresses of each terminal server.  The client requests the address for "TERMFARM" is [somewhat] randomly given one of the IP addresses and connects to that server.  Of course, when the client disconnects and tries to connect again, a different IP address may be returned, and the client would log in at that server, causing two active sessions to be open.  This is very unproductive for users, and it's a waste of resources.  Microsoft Session Broker (Connection Broker) can be used to keep track of open sessions, and subsequent reconnects redirect the user back to the server hosting their existing session ("revectoring").  This generally works fine. There are a few downfalls: 1) the initial connection may fail if the randomly-returned server is down, and the client will wait 30 seconds before trying the next, 2) Windows Server 2003 must be the more expensive Enterprise Edition to use Session Broker, 4) Windows 2003's Session Broker doesn't do any actual load balancing, and 5) Windows Server 2008's Connection Broker is better (load balances solely on session count), but it incorporates no other intelligence.  Additionally, RDP clients have to have direct IP connectivity with the terminal servers, which may not be desirable in some cases.

As an alternative, consider putting a couple of UNIX servers out in front, running <a href="http://haproxy.1wt.eu/">HAProxy</a> on a shared IP address, by using <a href="http://www.keepalived.org/">keepalived</a> or similar.  RDP clients would connect to a DNS name pointing to an IP address.  keepalived manages the failover IP address so that if the primary load balancer fails, the second one picks up the traffic.  The HAProxy load balancing software understands RDP cookies and can load balance connection requests.  Savvy admins and value-added companies can add more intelligence to the load balancing.  You could weight some servers higher than others, or include memory and CPU load, rather than using a sessions-per-host metric.  Also, using a 3rd-party load balancer can hide the servers, simplifying network and firewall administration effort.
<h1>Connection Request Protocol Details</h1>
Remote Desktop Protocol (RDP) clients send a small text string – a cookie or routing token– when starting a new connection. RDP is implemented through the <a href="http://www.itu.int/rec/T-REC-X.224/en">ITU X.224 protocol</a>, where commands are encapsulated in Protocol Data Units (PDU). RDP connection requests use X.224 Connection Request PDU.

ITU "<strong>T.123 : Network-specific data protocol stacks for multimedia conferencing"</strong>: <a href="http://www.itu.int/rec/T-REC-T.123/en">http://www.itu.int/rec/T-REC-T.123/en</a>

ITU "<strong>X.224 : Information technology - Open Systems Interconnection - Protocol for providing the connection-mode transport service": </strong><a href="http://www.itu.int/rec/T-REC-X.224/en">http://www.itu.int/rec/T-REC-X.224/en</a>

Microsoft "<strong>2.2.1.1 Client X.224 Connection Request PDU</strong>" : <a href="http://msdn.microsoft.com/en-us/library/cc240470">http://msdn.microsoft.com/en-us/library/cc240470</a>

A X.224 Connection Request PDU has the following layout:

<a href="http://www.snakelegs.org/wp-content/uploads/2011/02/rdp_connection_packet.png"><img class="aligncenter size-full wp-image-452" title="RDP Connection Request" src="http://www.snakelegs.org/wp-content/uploads/2011/02/rdp_connection_packet.png" alt="" width="871" height="543" /></a>
<h1>Cookies</h1>
Cookies are simple text strings and have nothing to do with authentication or any type of negotiation — they are just a string of text set by the RDP client. There are two types of cookies, and they’re mutually exclusive – a connection request can only contain one type of cookie. They are:
<ul>
	<li>User cookie (”mstshash”): ANSI text string that almost always contains a username.</li>
	<li>IP cookie (”msts”): numeric string that encodes the IP address and port number to route the connection to.</li>
</ul>
<h2>User Cookies (mstshash:)</h2>
A user cookie is intended to map a user to a specific terminal server, even if the user disconnects and reconnects from a different client and IP address.

The format of the user cookie is:
<pre>Cookie:[space]mstshash=[ANSI string][0x0d0a]</pre>
<pre style="text-align: left;">10:57:26.321918 192.168.0.201.33520 &gt; 192.168.0.93.3389:
P 2000684428:2000684480(52) ack 3864383132 win 5840
&lt;nop,nop,timestamp 2842032495848714&gt; (DF)
0000: 4500 0068 53a2 4000 4006 6477 c0a8 00c9 E..hS¢@.@.dw(.?
0010: c0a8 005d 82f0 0d3d 7740 058c e655 ce9c (.].?.=w@..?U?.
0020: 8018 16d0 3908 0000 0101 080a 0004 562b ...?9.........V+
0030: 94c3 a10a 0300 0034 2fe0 0000 0000 00<span style="color: #ff00ff;">43 <span style="color: #000000;">.á....4/?.....</span>C
0040: 6f6f 6b69 653a 206d 7374 7368 6173 683d ookie: mstshash=
0050: 6a61 736f 6e74 6573 7440 636f 7270 0d0a jasontest@corp..</span>
0060: 0100 0800 0000 0000 ........</pre>
The cookie is then “mstshash=jasontest@corp”.

A load balancer will keep a table listing the cookie and target  server IP address, using the cookie to balance the initial connection if  no state already exists, or routing the connection to the appropriate  server if an existing session does exist.

For example, USER1 has no existing session on any terminal server. USER1’s RDP client sends an RDP Connection Request to the load balancer (with cookie “mstshash=USER1”), and the load balancer sees that “mstshash=USER1” has no existing state (no active sessions). The load balancer, depending on configuration, applies an algorithm to determine where the request should be sent. Most load balancers default to round-robin, but different implementations may have more intelligent methods, like using terminal server agents to report back load (memory, CPU, etc.,) that the load balancer can use when routing initial connections. USER1’s connection request is sent to a terminal server.
<h3>Cookie Size and Interoperability</h3>
Different RDP client implementations impose different size limits on the user cookie:
<ul>
	<li>The Windows RDP client (mstsc.exe) truncates the user cookie to 9 characters.</li>
	<li>Newer versions of the Windows RDP client can use the <a href="http://msdn.microsoft.com/en-us/library/aa381177%28VS.85%29.aspx">LoadBalanceInfo</a> property and set the cookie up to 110 characters.  <a href="http://technet.microsoft.com/en-us/library/ee891143%28WS.10%29.aspx">More</a></li>
	<li><a href="http://www.rdesktop.org/">rdesktop</a> limits the cookie to 127 characters.</li>
	<li><a href="http://properjavardp.sourceforge.net/">ProperJavaRDP </a>and <a href="http://www.elusiva.com/opensource/">Elusiva’s “Open Source Java RDP”</a> fork both truncate the user cookie to 9 characters (iso.java: "if(uname.length() &gt; 9) uname = uname.substring(0,9);")</li>
</ul>
This truncation causes certain issues.

The most well-known issue is a collision that occurs when cookies are truncated to 9 characters.  For instance, the default Microsoft client cookie for  DOMAIN\USER1 is "DOMAIN\US" (9 characters).  The default Microsoft client cookie for  DOMAIN\USER2 is also "DOMAIN\US" (9 characters).   The cookies are the same for both connection requests, and a load balancer would route them to the same server.  The consensus solution for this is to use the USER@DOMAIN login format.  So, USER1@DOMAIN would have cookie "USER1@DOM", while USER2@DOMAIN would be "USER2@DOM".

But note that the user can't switch formats.  "CORP\Bob" connects with cookie "CORP\Bob" and disconnects.  He connects again, but uses "Bob@CORP" with cookie "Bob@CORP".  These cookies are different, so a load balancer will treat the connections differently -- he may end up with different sessions on different servers.

Another snafu occurs when switching between clients that truncate the cookie and those that don't.  CORP\ROBERT logs in from a Windows XP RDC client and opens a session on TERM-01.  He heads out to the warehouse and logs in from a UNIX thin client using rdesktop.  But he ends up with a new session on TERM-02.  His first connection was with cookie "CORP\ROBE", while his second connection used cookie "CORP\ROBERT".
<h2>IP Cookies</h2>
IP-based routing tokens "msts=" are handed back by Windows Session Broker / Connection Broker when "Use IP Address Redirection" is disabled.

<a href="http://www.snakelegs.org/wp-content/uploads/2011/02/use_token1.png"><img class="aligncenter size-medium wp-image-503" title="Token" src="http://www.snakelegs.org/wp-content/uploads/2011/02/use_token1-300x142.png" alt="" width="300" height="142" /></a>
<pre>Cookie:[space]msts=[ip address].[port].[reserved][0x0d0a]</pre>
<pre>09:39:40.133269 192.168.0.93.34764 &gt; 192.168.0.87.3389:
P 3072855348:3072855403(55) ack 1295660978 win 46
&lt;nop,nop,timestamp 2836782526209545&gt; (DF)
0000: 4500 006b d090 4000 4006 e7f7 c0a8 005d E..k?.@.@.??(.]
0010: c0a8 0057 87cc 0d3d b728 0d34 4d3a 37b2 (.W.?.=·(.4M:7²
0020: 8018 002e 8262 0000 0101 080a a915 ddbe .....b......©.?
0030: 0003 3289 0300 0037 32e0 0000 0000 00<span style="color: #ff00ff;">43</span> ..2....72?.....<span style="color: #ff00ff;">C
<strong>0040: 6f6f 6b69 653a 206d 7374 733d 3134 3933 ookie: msts=1493
0050: 3231 3534 3234 2e31 3536 3239 2e30 3030 215424.15629.000
0060: 300d 0a</strong></span>01 0008 0000 0000 00             <span style="color: #ff00ff;">0.</span>.........</pre>
Decode the IP address as follows:
<ol>
	<li>Convert decimal to hex:  1493215424 = <strong>59 00 A8 C0</strong>.</li>
	<li>Reverse the bytes:  <strong>C0 A8 00 59.</strong></li>
	<li>Convert back to decimal:  <strong>192 168 0 89 </strong>(192.168.0.89).</li>
</ol>
Decode the TCP port likewise:
<ol>
	<li>Convert decimal to hex:  15629 = <strong>3D 0D.</strong></li>
	<li>Reverse the bytes:  <strong>0D 3D.</strong></li>
	<li>Convert back to decimal:  <strong>D3D</strong> = 3389.</li>
</ol>
The reserved section should always be "<strong>0000</strong>".
<h1>Monitoring</h1>
I wrote a short Perl script to parse offline tcpdump packet dumps for RDP cookies:

<a href="http://www.snakelegs.org/2011/02/06/perl-and-libpcap-parsing-capture-files-offline-rdp-cookies/">http://www.snakelegs.org/2011/02/06/perl-and-libpcap-parsing-capture-files-offline-rdp-cookies/</a>
<h2>tcpdump</h2>
<pre>tcpdump -s 65535 -X ’dst port 3389 and tcp[37] == 0xe0’</pre>
<h2>Wireshark</h2>
<a href="http://wiki.wireshark.org/RDP">Wireshark's RDP documentation</a>
<pre>Filter:

x224.rdp_rt</pre>
<a href="http://www.snakelegs.org/wp-content/uploads/2011/02/wireshark_x2241.png"><img class="aligncenter size-full wp-image-516" title="wireshark_x224" src="http://www.snakelegs.org/wp-content/uploads/2011/02/wireshark_x2241.png" alt="" width="607" height="139" /></a>

&nbsp;
<h2>Network Monitor</h2>
Description == "X224:Connection Request"

<a href="http://www.snakelegs.org/wp-content/uploads/2011/02/netmon_rdp_connect1.png"><img class="aligncenter size-full wp-image-473" title="Network Monitor" src="http://www.snakelegs.org/wp-content/uploads/2011/02/netmon_rdp_connect1.png" alt="" width="714" height="194" /></a>

Make sure the Windows parser profile is loaded.

<a href="http://www.snakelegs.org/wp-content/uploads/2011/02/netmon_rdp_connect_2.png"><img class="aligncenter size-full wp-image-474" title="Network Monitor" src="http://www.snakelegs.org/wp-content/uploads/2011/02/netmon_rdp_connect_2.png" alt="" width="447" height="500" /></a>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">Connection Request Protocol Details
Remote Desktop Protocol (RDP) clients send a small text string – a cookie or routing
token– when starting a new connection. RDP is implemented through the ITU
X.224 protocol, where commands are encapsulated in Protocol Data Units (PDU).
RDP connection requests use X.224 Connection Request PDU.
http://msdn.microsoft.com/en-us/library/cc240470
http://207.46.16.248/en-us/library/dd644639
A X.224 Connection Request PDU has the following layout:</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>445</wp:post_id>
		<wp:post_date>2011-02-06 17:02:31</wp:post_date>
		<wp:post_date_gmt>2011-02-06 23:02:31</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>rdp-cookies-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="computers"><![CDATA[Computers]]></category>
		<category domain="category" nicename="main"><![CDATA[Main]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_eb0f6c5e966ce0a787494b23dce682ba</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_916c9fdd31f7c921085fc93163760f57</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_7004f00182709e9659a24a65929037ab</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_7643fc73bb9b65566e5d8b5608ee4b5c</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_1665abf302f26be5dc1ee102742b9e67</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_a64192c92ee67ca43e7819f723454090</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Perl and libpcap parsing capture files offline (RDP cookies)</title>
		<link>http://www.snakelegs.org/perl-and-libpcap-parsing-capture-files-offline-rdp-cookies/</link>
		<pubDate>Mon, 07 Feb 2011 03:30:43 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.snakelegs.org/?p=476</guid>
		<description></description>
		<content:encoded><![CDATA[Here's how to use Perl and libpcap to process a capture file offline.  This particular example parses RDP cookies....
<pre># ./watch_rdp_cookies.pl session.cap
192.168.0.93:46890:192.168.0.88:3389:mstshash=corp\jaso
192.168.0.93:46890:192.168.0.88:3389:0
192.168.0.93:49469:192.168.0.89:3389:msts=1493215424.15629.0000(192.168.0.89:3389)
</pre>


<!--more-->
<!-- Generator: GNU source-highlight 3.1.2 by Lorenzo Bettini http://www.lorenzobettini.it http://www.gnu.org/software/src-highlite -->
<pre><tt><em><span style="color: #9a1900;">#!/usr/bin/perl -w</span></em>
<em><span style="color: #9a1900;"># Copyright 2011 Jason Filley</span></em>
<em><span style="color: #9a1900;"># tcpdump -r capture.cap -s 65535 'dst port 3389 and tcp[37] == 0xe0'</span></em>

<strong><span style="color: #0000ff;">use</span></strong> <span style="color: #993399;">5.10</span><span style="color: #990000;">.</span><span style="color: #993399;">0</span><span style="color: #990000;">;</span>
<strong><span style="color: #0000ff;">use</span></strong> strict<span style="color: #990000;">;</span>

<strong><span style="color: #0000ff;">use</span></strong> Net<span style="color: #990000;">::</span>PcapUtils<span style="color: #990000;">;</span>
<strong><span style="color: #0000ff;">use</span></strong> NetPacket<span style="color: #990000;">::</span>Ethernet <strong><span style="color: #0000ff;">qw</span></strong><span style="color: #990000;">(:</span>strip<span style="color: #990000;">);</span>
<strong><span style="color: #0000ff;">use</span></strong> NetPacket<span style="color: #990000;">::</span>IP<span style="color: #990000;">;</span>
<strong><span style="color: #0000ff;">use</span></strong> NetPacket<span style="color: #990000;">::</span>TCP<span style="color: #990000;">;</span>

<strong><span style="color: #0000ff;">my</span></strong> <span style="color: #009900;">$filename</span> <span style="color: #990000;">=</span> <span style="color: #009900;">$ARGV</span><span style="color: #990000;">[</span><span style="color: #993399;">0</span><span style="color: #990000;">];</span>
<strong><span style="color: #0000ff;">my</span></strong> <span style="color: #009900;">$filter</span>   <span style="color: #990000;">=</span> <span style="color: #ff0000;">"dst port 3389 and tcp[37] == 0xe0"</span><span style="color: #990000;">;</span>
<strong><span style="color: #0000ff;">my</span></strong> <span style="color: #009900;">$filter_t</span><span style="color: #990000;">;</span>
<strong><span style="color: #0000ff;">my</span></strong> <span style="color: #009900;">$err</span> <span style="color: #990000;">=</span> <span style="color: #ff0000;">''</span><span style="color: #990000;">;</span>
<strong><span style="color: #0000ff;">my</span></strong> <span style="color: #009900;">$pcap</span> <span style="color: #990000;">=</span> Net<span style="color: #990000;">::</span>Pcap<span style="color: #990000;">::</span><strong><span style="color: #000000;">open_offline</span></strong><span style="color: #990000;">(</span> <span style="color: #ff0000;">"$filename"</span><span style="color: #990000;">,</span> <span style="color: #990000;">\</span><span style="color: #009900;">$err</span> <span style="color: #990000;">)</span>
  or <strong><span style="color: #0000ff;">die</span></strong> <span style="color: #ff0000;">"Cannot open file...$err\n"</span><span style="color: #990000;">;</span>
Net<span style="color: #990000;">::</span>Pcap<span style="color: #990000;">::</span><strong><span style="color: #000000;">compile</span></strong><span style="color: #990000;">(</span> <span style="color: #009900;">$pcap</span><span style="color: #990000;">,</span> <span style="color: #990000;">\</span><span style="color: #009900;">$filter_t</span><span style="color: #990000;">,</span> <span style="color: #009900;">$filter</span><span style="color: #990000;">,</span> <span style="color: #993399;">1</span><span style="color: #990000;">,</span> <span style="color: #993399;">0</span> <span style="color: #990000;">);</span>

Net<span style="color: #990000;">::</span>Pcap<span style="color: #990000;">::</span><strong><span style="color: #000000;">setfilter</span></strong><span style="color: #990000;">(</span> <span style="color: #009900;">$pcap</span><span style="color: #990000;">,</span> <span style="color: #009900;">$filter_t</span> <span style="color: #990000;">);</span>

<strong><span style="color: #0000ff;">sub</span></strong> get_cookie <span style="color: #ff0000;">{</span>
    <strong><span style="color: #0000ff;">my</span></strong> <span style="color: #009900;">$cookie</span> <span style="color: #990000;">=</span> <strong><span style="color: #0000ff;">shift</span></strong><span style="color: #990000;">;</span>
    <span style="color: #009900;">$cookie</span> <span style="color: #990000;">=~</span> <span style="color: #ff0000;">/Cookie: (.*)\x0d\x0a/</span><span style="color: #990000;">;</span>
    <strong><span style="color: #0000ff;">return</span></strong> <span style="color: #009900;">$1</span><span style="color: #990000;">;</span>
<span style="color: #ff0000;">}</span>

<strong><span style="color: #0000ff;">sub</span></strong> parse_cookie <span style="color: #ff0000;">{</span>
    <strong><span style="color: #0000ff;">my</span></strong> <span style="color: #009900;">$ipcookie</span> <span style="color: #990000;">=</span> <strong><span style="color: #0000ff;">shift</span></strong><span style="color: #990000;">;</span>
    <em><span style="color: #9a1900;">#e.g. "msts=420247818.15629.0000";</span></em>
    <strong><span style="color: #0000ff;">if</span></strong> <span style="color: #990000;">(</span> <strong><span style="color: #0000ff;">length</span></strong><span style="color: #990000;">(</span> <span style="color: #009900;">$ipcookie</span> <span style="color: #ff0000;">//</span> <span style="color: #ff0000;">''</span> <span style="color: #990000;">)</span> <span style="color: #990000;">)</span> <span style="color: #ff0000;">{</span>
        <strong><span style="color: #0000ff;">if</span></strong> <span style="color: #990000;">(</span> <span style="color: #009900;">$ipcookie</span> <span style="color: #990000;">=~</span> <span style="color: #ff0000;">/^msts=(\d*)\.(\d*)\./</span> <span style="color: #990000;">)</span> <span style="color: #ff0000;">{</span>
            <strong><span style="color: #0000ff;">my</span></strong> <span style="color: #009900;">$iphex</span>   <span style="color: #990000;">=</span> <strong><span style="color: #0000ff;">sprintf</span></strong><span style="color: #990000;">(</span> <span style="color: #ff0000;">"%8X"</span><span style="color: #990000;">,</span> <span style="color: #009900;">$1</span> <span style="color: #990000;">);</span>
            <strong><span style="color: #0000ff;">my</span></strong> <span style="color: #009900;">$porthex</span> <span style="color: #990000;">=</span> <strong><span style="color: #0000ff;">sprintf</span></strong><span style="color: #990000;">(</span> <span style="color: #ff0000;">"%4X"</span><span style="color: #990000;">,</span> <span style="color: #009900;">$2</span> <span style="color: #990000;">);</span>
            <span style="color: #009900;">$iphex</span> <span style="color: #990000;">=~</span> <span style="color: #ff0000;">/(..)(..)(..)(..)/</span>sg<span style="color: #990000;">;</span>
            <strong><span style="color: #0000ff;">my</span></strong> <span style="color: #009900;">$return</span> <span style="color: #990000;">=</span>
                <span style="color: #009900;">$ipcookie</span> <span style="color: #990000;">.</span> <span style="color: #ff0000;">"("</span>
              <span style="color: #990000;">.</span> <strong><span style="color: #0000ff;">hex</span></strong><span style="color: #990000;">(</span><span style="color: #009900;">$4</span><span style="color: #990000;">)</span> <span style="color: #990000;">.</span> <span style="color: #ff0000;">"."</span>
              <span style="color: #990000;">.</span> <strong><span style="color: #0000ff;">hex</span></strong><span style="color: #990000;">(</span><span style="color: #009900;">$3</span><span style="color: #990000;">)</span> <span style="color: #990000;">.</span> <span style="color: #ff0000;">"."</span>
              <span style="color: #990000;">.</span> <strong><span style="color: #0000ff;">hex</span></strong><span style="color: #990000;">(</span><span style="color: #009900;">$2</span><span style="color: #990000;">)</span> <span style="color: #990000;">.</span> <span style="color: #ff0000;">"."</span>
              <span style="color: #990000;">.</span> <strong><span style="color: #0000ff;">hex</span></strong><span style="color: #990000;">(</span><span style="color: #009900;">$1</span><span style="color: #990000;">);</span>
            <span style="color: #009900;">$porthex</span> <span style="color: #990000;">=~</span> <span style="color: #ff0000;">/(..)(..)/</span>sg<span style="color: #990000;">;</span>
            <span style="color: #009900;">$porthex</span> <span style="color: #990000;">=</span> <span style="color: #ff0000;">"$2"</span> <span style="color: #990000;">.</span> <span style="color: #ff0000;">"$1"</span><span style="color: #990000;">;</span>
            <span style="color: #009900;">$return</span> <span style="color: #990000;">.=</span> <span style="color: #ff0000;">":"</span> <span style="color: #990000;">.</span> <strong><span style="color: #0000ff;">hex</span></strong><span style="color: #990000;">(</span><span style="color: #009900;">$porthex</span><span style="color: #990000;">)</span> <span style="color: #990000;">.</span> <span style="color: #ff0000;">")"</span><span style="color: #990000;">;</span>
            <strong><span style="color: #0000ff;">return</span></strong> <span style="color: #009900;">$return</span><span style="color: #990000;">;</span>
        <span style="color: #ff0000;">}</span>
        <strong><span style="color: #0000ff;">elsif</span></strong> <span style="color: #990000;">(</span> <span style="color: #009900;">$ipcookie</span> <span style="color: #990000;">=~</span> <span style="color: #ff0000;">/^mstshash=/</span> <span style="color: #990000;">)</span> <span style="color: #ff0000;">{</span>
            <strong><span style="color: #0000ff;">return</span></strong> <span style="color: #009900;">$ipcookie</span><span style="color: #990000;">;</span>
        <span style="color: #ff0000;">}</span>
        <strong><span style="color: #0000ff;">else</span></strong> <span style="color: #ff0000;">{</span>
            <strong><span style="color: #0000ff;">return</span></strong> <span style="color: #ff0000;">''</span><span style="color: #990000;">;</span>
        <span style="color: #ff0000;">}</span>
    <span style="color: #ff0000;">}</span>
<span style="color: #ff0000;">}</span>

<strong><span style="color: #0000ff;">sub</span></strong> process_pkt <span style="color: #ff0000;">{</span>
    <strong><span style="color: #0000ff;">my</span></strong> <span style="color: #990000;">(</span> <span style="color: #009900;">$user</span><span style="color: #990000;">,</span> <span style="color: #009900;">$hdr</span><span style="color: #990000;">,</span> <span style="color: #009900;">$pkt</span> <span style="color: #990000;">)</span> <span style="color: #990000;">=</span> <span style="color: #009900;">@_</span><span style="color: #990000;">;</span>
    <strong><span style="color: #0000ff;">my</span></strong> <span style="color: #009900;">$ip_obj</span>  <span style="color: #990000;">=</span> NetPacket<span style="color: #990000;">::</span>IP<span style="color: #990000;">-&gt;</span><strong><span style="color: #000000;">decode</span></strong><span style="color: #990000;">(</span> <strong><span style="color: #000000;">eth_strip</span></strong><span style="color: #990000;">(</span><span style="color: #009900;">$pkt</span><span style="color: #990000;">)</span> <span style="color: #990000;">);</span>
    <strong><span style="color: #0000ff;">my</span></strong> <span style="color: #009900;">$tcp_obj</span> <span style="color: #990000;">=</span> NetPacket<span style="color: #990000;">::</span>TCP<span style="color: #990000;">-&gt;</span><strong><span style="color: #000000;">decode</span></strong><span style="color: #990000;">(</span> <span style="color: #009900;">$ip_obj</span><span style="color: #990000;">-&gt;</span><span style="color: #ff0000;">{</span>data<span style="color: #ff0000;">}</span> <span style="color: #990000;">);</span>
    <strong><span style="color: #0000ff;">print</span></strong><span style="color: #990000;">(</span> <span style="color: #ff0000;">"$ip_obj-&gt;{src_ip}"</span> <span style="color: #990000;">.</span> <span style="color: #ff0000;">":"</span> <span style="color: #990000;">.</span> <span style="color: #ff0000;">"$tcp_obj-&gt;{src_port}"</span> <span style="color: #990000;">.</span> <span style="color: #ff0000;">":"</span> <span style="color: #990000;">);</span>
    <strong><span style="color: #0000ff;">print</span></strong><span style="color: #990000;">(</span> <span style="color: #ff0000;">"$ip_obj-&gt;{dest_ip}"</span> <span style="color: #990000;">.</span> <span style="color: #ff0000;">":"</span> <span style="color: #990000;">.</span> <span style="color: #ff0000;">"$tcp_obj-&gt;{dest_port}"</span> <span style="color: #990000;">.</span> <span style="color: #ff0000;">":"</span> <span style="color: #990000;">);</span>
    <strong><span style="color: #0000ff;">print</span></strong> <strong><span style="color: #000000;">parse_cookie</span></strong><span style="color: #990000;">(</span> <strong><span style="color: #000000;">get_cookie</span></strong><span style="color: #990000;">(</span> <span style="color: #009900;">$tcp_obj</span><span style="color: #990000;">-&gt;</span><span style="color: #ff0000;">{</span>data<span style="color: #ff0000;">}</span> <span style="color: #990000;">)</span> <span style="color: #990000;">)</span> <span style="color: #990000;">.</span> <span style="color: #ff0000;">"\n"</span><span style="color: #990000;">;</span>
<span style="color: #ff0000;">}</span>

Net<span style="color: #990000;">::</span>Pcap<span style="color: #990000;">::</span><strong><span style="color: #000000;">loop</span></strong><span style="color: #990000;">(</span> <span style="color: #009900;">$pcap</span><span style="color: #990000;">,</span> <span style="color: #990000;">-</span><span style="color: #993399;">1</span><span style="color: #990000;">,</span> <span style="color: #990000;">\&amp;</span>process_pkt<span style="color: #990000;">,</span> <span style="color: #ff0000;">''</span> <span style="color: #990000;">);</span>

</tt></pre>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 560px; width: 1px; height: 1px; overflow: hidden;">
<pre><tt><strong><span style="color: #0000ff;">return</span></strong></tt></pre>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>476</wp:post_id>
		<wp:post_date>2011-02-06 21:30:43</wp:post_date>
		<wp:post_date_gmt>2011-02-07 03:30:43</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>perl-and-libpcap-parsing-capture-files-offline-rdp-cookies</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="computers"><![CDATA[Computers]]></category>
		<category domain="category" nicename="main"><![CDATA[Main]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>

	<item>
				<title>RFC Map (rfcmap.pl)</title>
		<link>http://www.snakelegs.org/rfc-map-rfcmap-pl/</link>
		<pubDate>Sun, 13 Feb 2011 01:47:05 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.snakelegs.org/?p=493</guid>
		<description></description>
		<content:encoded><![CDATA[rfcmap.pl parses the <a href="ftp://ftp.rfc-editor.org/in-notes/rfc-ref.txt">RFC index</a> and produces <a href="http://www.graphviz.org/">Graphviz</a> output.

For example, here's the output for "perl -T rfcmap.pl RFC0821 RFC0822 RFC1035" which covers some of the initial documents on SMTP, mail message format, and domain  names.

<a href="http://www.snakelegs.org/wp-content/uploads/2011/02/email_and_domains.png"><img class="aligncenter size-medium wp-image-494" title="email_and_domains" src="http://www.snakelegs.org/wp-content/uploads/2011/02/email_and_domains-235x300.png" alt="" width="235" height="300" /></a>

Could be better; could be worse.

<!--more-->
<pre><tt><em><span style="color: #9a1900;"># Copyright (c) 2011 Jason Filley jason@snakelegs.org</span></em>
<em><span style="color: #9a1900;">#</span></em>
<em><span style="color: #9a1900;"># Permission to use, copy, modify, and distribute this software for any</span></em>
<em><span style="color: #9a1900;"># purpose with or without fee is hereby granted, provided that the above</span></em>
<em><span style="color: #9a1900;"># copyright notice and this permission notice appear in all copies.</span></em>
<em><span style="color: #9a1900;">#</span></em>
<em><span style="color: #9a1900;"># THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES</span></em>
<em><span style="color: #9a1900;"># WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF</span></em>
<em><span style="color: #9a1900;"># MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR</span></em>
<em><span style="color: #9a1900;"># ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES</span></em>
<em><span style="color: #9a1900;"># WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN</span></em>
<em><span style="color: #9a1900;"># ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF</span></em>
<em><span style="color: #9a1900;"># OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.</span></em>
<em><span style="color: #9a1900;">#</span></em>
<em><span style="color: #9a1900;"># Name: rfcmap.pl</span></em>
<em><span style="color: #9a1900;"># Purpose: Output Graphviz .dot format for dated graph of specified RFC's, plus</span></em>
<em><span style="color: #9a1900;">#   documents obsoleting or obsoleted by it/them.</span></em>
<em><span style="color: #9a1900;"># Input file:  ftp://ftp.rfc-editor.org/in-notes/rfc-ref.txt</span></em>
<em><span style="color: #9a1900;"># Usage example:  perl -T rfcmap.pl RFC1035 RFC0821 RFC0822 &gt; output.dot</span></em>
<em><span style="color: #9a1900;">#   arguments are names of documents from first column, as written</span></em>

<strong><span style="color: #0000ff;">use</span></strong> strict<span style="color: #990000;">;</span>
<strong><span style="color: #0000ff;">use</span></strong> warnings<span style="color: #990000;">;</span>
<strong><span style="color: #0000ff;">use</span></strong> <span style="color: #993399;">5.010</span><span style="color: #990000;">;</span>

<strong><span style="color: #0000ff;">if</span></strong> <span style="color: #990000;">(</span> <span style="color: #009900;">$#ARGV</span> <span style="color: #990000;">&lt;</span> <span style="color: #993399;">0</span> <span style="color: #990000;">)</span> <span style="color: #ff0000;">{</span>
    <strong><span style="color: #0000ff;">die</span></strong> <span style="color: #ff0000;">"Specify the RFC's to use as command-line parameters\n"</span><span style="color: #990000;">;</span>
<span style="color: #ff0000;">}</span>

<strong><span style="color: #0000ff;">sub</span></strong> stripwhitespace <span style="color: #ff0000;">{</span>
    <strong><span style="color: #0000ff;">my</span></strong> <span style="color: #009900;">$string</span> <span style="color: #990000;">=</span> <strong><span style="color: #0000ff;">shift</span></strong><span style="color: #990000;">;</span>
    <span style="color: #009900;">$string</span> <span style="color: #990000;">=~</span> <strong><span style="color: #0000ff;">s</span></strong><span style="color: #ff6600;">/[\n\r\s]+//</span><strong><span style="color: #0000ff;">g</span></strong><span style="color: #990000;">;</span>
    <strong><span style="color: #0000ff;">return</span></strong> <span style="color: #009900;">$string</span><span style="color: #990000;">;</span>
<span style="color: #ff0000;">}</span>

<strong><span style="color: #0000ff;">sub</span></strong> trim <span style="color: #ff0000;">{</span>
    <strong><span style="color: #0000ff;">my</span></strong> <span style="color: #009900;">$a</span> <span style="color: #990000;">=</span> <strong><span style="color: #0000ff;">shift</span></strong><span style="color: #990000;">;</span>
    <span style="color: #009900;">$a</span> <span style="color: #990000;">=~</span> <strong><span style="color: #0000ff;">s</span></strong><span style="color: #ff6600;">/^[\n\r\s]+//</span><strong><span style="color: #0000ff;">g</span></strong><span style="color: #990000;">;</span>
    <span style="color: #009900;">$a</span> <span style="color: #990000;">=~</span> <strong><span style="color: #0000ff;">s</span></strong><span style="color: #ff6600;">/[\n\r\s]+$//</span><strong><span style="color: #0000ff;">g</span></strong><span style="color: #990000;">;</span>
    <strong><span style="color: #0000ff;">return</span></strong> <span style="color: #009900;">$a</span><span style="color: #990000;">;</span>
<span style="color: #ff0000;">}</span>

<strong><span style="color: #0000ff;">sub</span></strong> grabyear <span style="color: #ff0000;">{</span>
    <strong><span style="color: #0000ff;">my</span></strong> <span style="color: #009900;">$year</span> <span style="color: #990000;">=</span> <strong><span style="color: #0000ff;">shift</span></strong><span style="color: #990000;">;</span>
    <span style="color: #009900;">$year</span> <span style="color: #990000;">=~</span> <span style="color: #ff0000;">/(\d{4})\.$/</span><span style="color: #990000;">;</span>
    <strong><span style="color: #0000ff;">return</span></strong> <span style="color: #009900;">$1</span><span style="color: #990000;">;</span>
<span style="color: #ff0000;">}</span>

<strong><span style="color: #0000ff;">sub</span></strong> uniq <span style="color: #ff0000;">{</span>
    <strong><span style="color: #0000ff;">my</span></strong> <span style="color: #009900;">%h</span><span style="color: #990000;">;</span>
    <strong><span style="color: #0000ff;">return</span></strong> <strong><span style="color: #0000ff;">grep</span></strong> <span style="color: #ff0000;">{</span> <span style="color: #990000;">!</span><span style="color: #009900;">$h</span><span style="color: #ff0000;">{</span><span style="color: #009900;">$_</span><span style="color: #ff0000;">}</span><span style="color: #990000;">++</span> <span style="color: #ff0000;">}</span> <span style="color: #009900;">@_</span><span style="color: #990000;">;</span>
<span style="color: #ff0000;">}</span>

<strong><span style="color: #0000ff;">sub</span></strong> GetTitleOnly <span style="color: #ff0000;">{</span>
    <strong><span style="color: #0000ff;">my</span></strong> <span style="color: #009900;">$title</span> <span style="color: #990000;">=</span> <strong><span style="color: #0000ff;">shift</span></strong><span style="color: #990000;">;</span>
    <span style="color: #009900;">$title</span> <span style="color: #990000;">=~</span> <span style="color: #ff0000;">/([A-Za-z]*)(0*)(\d*)/</span><span style="color: #990000;">;</span>
    <strong><span style="color: #0000ff;">my</span></strong> <span style="color: #009900;">$toreturn</span> <span style="color: #990000;">=</span> <span style="color: #009900;">$1</span> <span style="color: #990000;">.</span> <span style="color: #ff0000;">" "</span> <span style="color: #990000;">.</span> <span style="color: #009900;">$3</span><span style="color: #990000;">;</span>
    <strong><span style="color: #0000ff;">return</span></strong> <span style="color: #009900;">$toreturn</span><span style="color: #990000;">;</span>
<span style="color: #ff0000;">}</span>

<strong><span style="color: #0000ff;">sub</span></strong> GetFullTitle <span style="color: #ff0000;">{</span>
    <strong><span style="color: #0000ff;">my</span></strong> <span style="color: #009900;">$title</span> <span style="color: #990000;">=</span> <strong><span style="color: #0000ff;">shift</span></strong><span style="color: #990000;">;</span>
    <span style="color: #009900;">$title</span> <span style="color: #990000;">=~</span> <span style="color: #ff0000;">/(\"(.*)\\\")/</span><span style="color: #990000;">;</span>
    <strong><span style="color: #0000ff;">my</span></strong> <span style="color: #009900;">$toreturn</span> <span style="color: #990000;">=</span> <span style="color: #009900;">$2</span><span style="color: #990000;">;</span>
    <strong><span style="color: #0000ff;">return</span></strong> <span style="color: #009900;">$toreturn</span><span style="color: #990000;">;</span>
<span style="color: #ff0000;">}</span>

<strong><span style="color: #0000ff;">my</span></strong> <span style="color: #009900;">@lines</span>   <span style="color: #990000;">=</span> <span style="color: #990000;">();</span>
<strong><span style="color: #0000ff;">my</span></strong> <span style="color: #009900;">@todo</span>    <span style="color: #990000;">=</span> <span style="color: #990000;">();</span>
<strong><span style="color: #0000ff;">my</span></strong> <span style="color: #009900;">@done</span>    <span style="color: #990000;">=</span> <span style="color: #990000;">();</span>
<strong><span style="color: #0000ff;">my</span></strong> <span style="color: #009900;">@final</span>   <span style="color: #990000;">=</span> <span style="color: #990000;">();</span>
<strong><span style="color: #0000ff;">my</span></strong> <span style="color: #009900;">%srcHoA</span>  <span style="color: #990000;">=</span> <span style="color: #990000;">();</span>
<strong><span style="color: #0000ff;">my</span></strong> <span style="color: #009900;">%srcbib</span>  <span style="color: #990000;">=</span> <span style="color: #990000;">();</span>
<strong><span style="color: #0000ff;">my</span></strong> <span style="color: #009900;">%srcdate</span> <span style="color: #990000;">=</span> <span style="color: #990000;">();</span>

<strong><span style="color: #0000ff;">push</span></strong><span style="color: #990000;">(</span> <span style="color: #009900;">@todo</span><span style="color: #990000;">,</span> <span style="color: #009900;">@ARGV</span> <span style="color: #990000;">);</span>
<span style="color: #009900;">@todo</span> <span style="color: #990000;">=</span> <strong><span style="color: #000000;">uniq</span></strong><span style="color: #990000;">(</span><span style="color: #009900;">@todo</span><span style="color: #990000;">);</span>

<strong><span style="color: #0000ff;">my</span></strong> <span style="color: #009900;">$file</span> <span style="color: #990000;">=</span> <span style="color: #ff0000;">"rfc-ref.txt"</span><span style="color: #990000;">;</span>

<strong><span style="color: #0000ff;">open</span></strong><span style="color: #990000;">(</span> RFCREF<span style="color: #990000;">,</span> <span style="color: #ff0000;">"&lt;$file"</span> <span style="color: #990000;">)</span> <span style="color: #990000;">||</span> <strong><span style="color: #0000ff;">die</span></strong> <span style="color: #ff0000;">"Can't open file.\n"</span><span style="color: #990000;">;</span>
<strong><span style="color: #0000ff;">while</span></strong> <span style="color: #990000;">(</span><span style="color: #ff0000;">&lt;RFCREF&gt;</span><span style="color: #990000;">)</span> <span style="color: #ff0000;">{</span>
    <strong><span style="color: #0000ff;">if</span></strong> <span style="color: #990000;">(</span><span style="color: #ff0000;">/^RFC/</span><span style="color: #990000;">)</span> <span style="color: #ff0000;">{</span>
        <strong><span style="color: #0000ff;">push</span></strong><span style="color: #990000;">(</span> <span style="color: #009900;">@lines</span><span style="color: #990000;">,</span> <span style="color: #009900;">$_</span> <span style="color: #990000;">);</span>
    <span style="color: #ff0000;">}</span>
<span style="color: #ff0000;">}</span>
<strong><span style="color: #0000ff;">close</span></strong><span style="color: #990000;">(</span>RFCREF<span style="color: #990000;">);</span>

<em><span style="color: #9a1900;"># link all references</span></em>
<strong><span style="color: #0000ff;">while</span></strong> <span style="color: #990000;">(</span> <strong><span style="color: #000000;">scalar</span></strong><span style="color: #990000;">(</span><span style="color: #009900;">@todo</span><span style="color: #990000;">)</span> <span style="color: #990000;">&gt;</span> <span style="color: #993399;">0</span> <span style="color: #990000;">)</span> <span style="color: #ff0000;">{</span>
    <strong><span style="color: #0000ff;">my</span></strong> <span style="color: #009900;">$item</span> <span style="color: #990000;">=</span> <strong><span style="color: #0000ff;">shift</span></strong><span style="color: #990000;">(</span><span style="color: #009900;">@todo</span><span style="color: #990000;">);</span>
    <strong><span style="color: #0000ff;">foreach</span></strong> <strong><span style="color: #0000ff;">my</span></strong> <span style="color: #009900;">$entry</span> <span style="color: #990000;">(</span><span style="color: #009900;">@lines</span><span style="color: #990000;">)</span> <span style="color: #ff0000;">{</span>
        <strong><span style="color: #0000ff;">my</span></strong> <span style="color: #009900;">@line</span> <span style="color: #990000;">=</span> <strong><span style="color: #0000ff;">split</span></strong><span style="color: #990000;">(</span> <span style="color: #ff0000;">'\|'</span><span style="color: #990000;">,</span> <span style="color: #009900;">$entry</span> <span style="color: #990000;">);</span>
        <strong><span style="color: #0000ff;">my</span></strong> <span style="color: #009900;">$RFC</span> <span style="color: #990000;">=</span> <strong><span style="color: #000000;">stripwhitespace</span></strong><span style="color: #990000;">(</span> <span style="color: #009900;">$line</span><span style="color: #990000;">[</span><span style="color: #993399;">0</span><span style="color: #990000;">]</span> <span style="color: #990000;">);</span>

        <em><span style="color: #9a1900;">#hash of arrays (RFC -&gt; @ObsoletedByList)</span></em>
        <strong><span style="color: #0000ff;">my</span></strong> <span style="color: #009900;">$ObsoletedBy</span> <span style="color: #990000;">=</span> <strong><span style="color: #000000;">stripwhitespace</span></strong><span style="color: #990000;">(</span> <span style="color: #009900;">$line</span><span style="color: #990000;">[</span><span style="color: #993399;">1</span><span style="color: #990000;">]</span> <span style="color: #990000;">);</span>
        <strong><span style="color: #0000ff;">my</span></strong> <span style="color: #009900;">@ObsoletedByList</span> <span style="color: #990000;">=</span> <strong><span style="color: #0000ff;">split</span></strong><span style="color: #990000;">(</span> <span style="color: #ff0000;">','</span><span style="color: #990000;">,</span> <span style="color: #009900;">$ObsoletedBy</span> <span style="color: #990000;">);</span>
        <span style="color: #009900;">$srcHoA</span><span style="color: #ff0000;">{</span><span style="color: #009900;">$RFC</span><span style="color: #ff0000;">}</span> <span style="color: #990000;">=</span> <span style="color: #990000;">[</span><span style="color: #009900;">@ObsoletedByList</span><span style="color: #990000;">];</span>

        <em><span style="color: #9a1900;">#hash (RFC -&gt; Bib)</span></em>
        <strong><span style="color: #0000ff;">my</span></strong> <span style="color: #009900;">$Bib</span> <span style="color: #990000;">=</span> <span style="color: #009900;">$line</span><span style="color: #990000;">[</span><span style="color: #993399;">2</span><span style="color: #990000;">];</span>
        <strong><span style="color: #0000ff;">chomp</span></strong> <span style="color: #009900;">$Bib</span><span style="color: #990000;">;</span>
        <span style="color: #009900;">$Bib</span> <span style="color: #990000;">=</span> <strong><span style="color: #000000;">trim</span></strong><span style="color: #990000;">(</span><span style="color: #009900;">$Bib</span><span style="color: #990000;">);</span>
        <span style="color: #009900;">$Bib</span> <span style="color: #990000;">=~</span> <strong><span style="color: #0000ff;">s</span></strong><span style="color: #ff6600;">/(\")/\\$1/</span><strong><span style="color: #0000ff;">g</span></strong><span style="color: #990000;">;</span>
        <span style="color: #009900;">$srcbib</span><span style="color: #ff0000;">{</span><span style="color: #009900;">$RFC</span><span style="color: #ff0000;">}</span> <span style="color: #990000;">=</span> <span style="color: #009900;">$Bib</span><span style="color: #990000;">;</span>

        <em><span style="color: #9a1900;">#hash (RFC -&gt; date)</span></em>
        <strong><span style="color: #0000ff;">my</span></strong> <span style="color: #009900;">@working</span> <span style="color: #990000;">=</span> <span style="color: #990000;">();</span>
        <strong><span style="color: #0000ff;">push</span></strong><span style="color: #990000;">(</span> <span style="color: #009900;">@working</span><span style="color: #990000;">,</span> <span style="color: #009900;">$RFC</span> <span style="color: #990000;">);</span>
        <strong><span style="color: #0000ff;">push</span></strong><span style="color: #990000;">(</span> <span style="color: #009900;">@working</span><span style="color: #990000;">,</span> <span style="color: #009900;">@ObsoletedByList</span> <span style="color: #990000;">);</span>

        <strong><span style="color: #0000ff;">if</span></strong> <span style="color: #990000;">(</span> <span style="color: #009900;">$item</span> <span style="color: #990000;">~~</span> <span style="color: #009900;">@working</span> <span style="color: #990000;">)</span> <span style="color: #ff0000;">{</span>
            <strong><span style="color: #0000ff;">unless</span></strong> <span style="color: #990000;">(</span> <span style="color: #009900;">$entry</span> <span style="color: #990000;">~~</span> <span style="color: #009900;">@final</span> <span style="color: #990000;">)</span> <span style="color: #ff0000;">{</span>
                <strong><span style="color: #0000ff;">push</span></strong><span style="color: #990000;">(</span> <span style="color: #009900;">@final</span><span style="color: #990000;">,</span> <span style="color: #009900;">$entry</span> <span style="color: #990000;">);</span>    <em><span style="color: #9a1900;">#only if not already in @final</span></em>
                <span style="color: #009900;">$srcdate</span><span style="color: #ff0000;">{</span><span style="color: #009900;">$RFC</span><span style="color: #ff0000;">}</span> <span style="color: #990000;">=</span> <strong><span style="color: #000000;">grabyear</span></strong><span style="color: #990000;">(</span><span style="color: #009900;">$Bib</span><span style="color: #990000;">);</span>
            <span style="color: #ff0000;">}</span>

            <strong><span style="color: #0000ff;">foreach</span></strong> <strong><span style="color: #0000ff;">my</span></strong> <span style="color: #009900;">$workitem</span> <span style="color: #990000;">(</span><span style="color: #009900;">@working</span><span style="color: #990000;">)</span> <span style="color: #ff0000;">{</span>
                <strong><span style="color: #0000ff;">unless</span></strong> <span style="color: #990000;">(</span> <span style="color: #990000;">(</span> <span style="color: #009900;">$workitem</span> <span style="color: #990000;">~~</span> <span style="color: #009900;">@done</span> <span style="color: #990000;">)</span> <span style="color: #990000;">||</span> <span style="color: #990000;">(</span> <span style="color: #009900;">$workitem</span> <span style="color: #990000;">~~</span> <span style="color: #009900;">@todo</span> <span style="color: #990000;">)</span> <span style="color: #990000;">)</span> <span style="color: #ff0000;">{</span>
                    <strong><span style="color: #0000ff;">push</span></strong><span style="color: #990000;">(</span> <span style="color: #009900;">@todo</span><span style="color: #990000;">,</span> <span style="color: #009900;">$workitem</span> <span style="color: #990000;">);</span>
                <span style="color: #ff0000;">}</span>
            <span style="color: #ff0000;">}</span>
        <span style="color: #ff0000;">}</span>
    <span style="color: #ff0000;">}</span>
    <span style="color: #009900;">@todo</span> <span style="color: #990000;">=</span> <strong><span style="color: #0000ff;">grep</span></strong> <span style="color: #ff0000;">{</span> <span style="color: #009900;">$_</span> ne <span style="color: #009900;">$item</span> <span style="color: #ff0000;">}</span> <span style="color: #009900;">@todo</span><span style="color: #990000;">;</span>
    <strong><span style="color: #0000ff;">push</span></strong><span style="color: #990000;">(</span> <span style="color: #009900;">@done</span><span style="color: #990000;">,</span> <span style="color: #009900;">$item</span> <span style="color: #990000;">);</span>
<span style="color: #ff0000;">}</span>

<em><span style="color: #9a1900;"># find lowest to highest quoted years (e.g., 1981..2010)</span></em>
<em><span style="color: #9a1900;"># todo: what if only one year?</span></em>
<strong><span style="color: #0000ff;">my</span></strong> <span style="color: #009900;">$highest_val</span> <span style="color: #990000;">=</span> <span style="color: #990000;">(</span> <strong><span style="color: #0000ff;">sort</span></strong> <span style="color: #ff0000;">{</span> <span style="color: #009900;">$b</span> <span style="color: #ff0000;">&lt;=&gt;</span> <span style="color: #009900;">$a</span> <span style="color: #ff0000;">}</span> <strong><span style="color: #0000ff;">values</span></strong> <span style="color: #009900;">%srcdate</span> <span style="color: #990000;">)[</span><span style="color: #993399;">0</span><span style="color: #990000;">];</span>
<strong><span style="color: #0000ff;">my</span></strong> <span style="color: #009900;">$lowest_val</span>  <span style="color: #990000;">=</span> <span style="color: #990000;">(</span> <strong><span style="color: #0000ff;">sort</span></strong> <span style="color: #ff0000;">{</span> <span style="color: #009900;">$a</span> <span style="color: #ff0000;">&lt;=&gt;</span> <span style="color: #009900;">$b</span> <span style="color: #ff0000;">}</span> <strong><span style="color: #0000ff;">values</span></strong> <span style="color: #009900;">%srcdate</span> <span style="color: #990000;">)[</span><span style="color: #993399;">0</span><span style="color: #990000;">];</span>
<strong><span style="color: #0000ff;">my</span></strong> <span style="color: #009900;">@dates</span> <span style="color: #990000;">=</span> <span style="color: #990000;">(</span> <span style="color: #009900;">$lowest_val</span> <span style="color: #990000;">..</span> <span style="color: #009900;">$highest_val</span> <span style="color: #990000;">);</span>

<em><span style="color: #9a1900;"># draw the graph</span></em>
<em><span style="color: #9a1900;"># A: Because I didn't have the time to figure out why the Graphviz perl module</span></em>
<em><span style="color: #9a1900;"># kept munging my ranks....</span></em>
<strong><span style="color: #0000ff;">print</span></strong>
<span style="color: #ff0000;">"digraph test { graph [ratio=fill, fontsize=24];\nnode [label=\"\\N\", fontsize=24];\n"</span><span style="color: #990000;">;</span>

<strong><span style="color: #0000ff;">my</span></strong> <span style="color: #009900;">$yearnodes</span><span style="color: #990000;">;</span>
<strong><span style="color: #0000ff;">my</span></strong> <span style="color: #009900;">$yearedges</span><span style="color: #990000;">;</span>    <em><span style="color: #9a1900;">#what if only one?</span></em>

<em><span style="color: #9a1900;">#draw the years</span></em>
<strong><span style="color: #0000ff;">for</span></strong> <span style="color: #990000;">(</span> <strong><span style="color: #0000ff;">my</span></strong> <span style="color: #009900;">$count</span> <span style="color: #990000;">=</span> <span style="color: #993399;">0</span> <span style="color: #990000;">;</span> <span style="color: #009900;">$count</span> <span style="color: #990000;">&lt;=</span> <span style="color: #009900;">$#dates</span> <span style="color: #990000;">;</span> <span style="color: #009900;">$count</span><span style="color: #990000;">++</span> <span style="color: #990000;">)</span> <span style="color: #ff0000;">{</span>
    <span style="color: #009900;">$yearnodes</span> <span style="color: #990000;">.=</span>
      <span style="color: #009900;">$dates</span><span style="color: #990000;">[</span><span style="color: #009900;">$count</span><span style="color: #990000;">]</span> <span style="color: #990000;">.</span> <span style="color: #ff0000;">" [label="</span> <span style="color: #990000;">.</span> <span style="color: #009900;">$dates</span><span style="color: #990000;">[</span><span style="color: #009900;">$count</span><span style="color: #990000;">]</span> <span style="color: #990000;">.</span> <span style="color: #ff0000;">", shape=plaintext];\n"</span><span style="color: #990000;">;</span>
    <strong><span style="color: #0000ff;">unless</span></strong> <span style="color: #990000;">(</span> <span style="color: #009900;">$count</span> <span style="color: #990000;">==</span> <span style="color: #993399;">0</span> <span style="color: #990000;">)</span> <span style="color: #ff0000;">{</span>
        <span style="color: #009900;">$yearedges</span> <span style="color: #990000;">.=</span>
            <span style="color: #009900;">$dates</span><span style="color: #990000;">[</span> <span style="color: #009900;">$count</span> <span style="color: #990000;">-</span> <span style="color: #993399;">1</span> <span style="color: #990000;">]</span> <span style="color: #990000;">.</span> <span style="color: #ff0000;">" -&gt; "</span>
          <span style="color: #990000;">.</span> <span style="color: #009900;">$dates</span><span style="color: #990000;">[</span><span style="color: #009900;">$count</span><span style="color: #990000;">]</span>
          <span style="color: #990000;">.</span> <span style="color: #ff0000;">" [style=dotted, shape=none];\n"</span><span style="color: #990000;">;</span>
    <span style="color: #ff0000;">}</span>
<span style="color: #ff0000;">}</span>

<strong><span style="color: #0000ff;">print</span></strong> <span style="color: #009900;">$yearnodes</span><span style="color: #990000;">;</span>
<strong><span style="color: #0000ff;">print</span></strong> <span style="color: #009900;">$yearedges</span><span style="color: #990000;">;</span>

<em><span style="color: #9a1900;"># draw the bib nodes</span></em>
<strong><span style="color: #0000ff;">foreach</span></strong> <strong><span style="color: #0000ff;">my</span></strong> <span style="color: #009900;">$rfcnode</span> <span style="color: #990000;">(</span><span style="color: #009900;">@done</span><span style="color: #990000;">)</span> <span style="color: #ff0000;">{</span>
    <strong><span style="color: #0000ff;">if</span></strong> <span style="color: #990000;">(</span> <span style="color: #009900;">$rfcnode</span> <span style="color: #990000;">=~</span> <span style="color: #ff0000;">/^RFC/</span> <span style="color: #990000;">)</span> <span style="color: #ff0000;">{</span>

        <strong><span style="color: #0000ff;">print</span></strong> <span style="color: #009900;">$rfcnode</span>
          <span style="color: #990000;">.</span> <span style="color: #ff0000;">" [label = \""</span>
          <span style="color: #990000;">.</span> <strong><span style="color: #000000;">GetTitleOnly</span></strong><span style="color: #990000;">(</span><span style="color: #009900;">$rfcnode</span><span style="color: #990000;">)</span> <span style="color: #990000;">.</span> <span style="color: #ff0000;">"\\n"</span>
          <span style="color: #990000;">.</span> <strong><span style="color: #000000;">GetFullTitle</span></strong><span style="color: #990000;">(</span> <span style="color: #009900;">$srcbib</span><span style="color: #ff0000;">{</span><span style="color: #009900;">$rfcnode</span><span style="color: #ff0000;">}</span> <span style="color: #990000;">)</span>
          <span style="color: #990000;">.</span> <span style="color: #ff0000;">"\" shape=plaintext, style=filled, color=lightskyblue];\n"</span><span style="color: #990000;">;</span>
    <span style="color: #ff0000;">}</span>
    <strong><span style="color: #0000ff;">else</span></strong> <span style="color: #ff0000;">{</span>
        <strong><span style="color: #0000ff;">print</span></strong> <span style="color: #009900;">$rfcnode</span>
          <span style="color: #990000;">.</span> <span style="color: #ff0000;">" [label = \""</span>
          <span style="color: #990000;">.</span> <strong><span style="color: #000000;">GetTitleOnly</span></strong><span style="color: #990000;">(</span><span style="color: #009900;">$rfcnode</span><span style="color: #990000;">)</span>
          <span style="color: #990000;">.</span> <span style="color: #ff0000;">"\" shape=box, style=filled, color=mediumorchid];\n"</span><span style="color: #990000;">;</span>
    <span style="color: #ff0000;">}</span>
<span style="color: #ff0000;">}</span>

<em><span style="color: #9a1900;"># set ranks</span></em>
<strong><span style="color: #0000ff;">foreach</span></strong> <strong><span style="color: #0000ff;">my</span></strong> <span style="color: #009900;">$srcnode</span> <span style="color: #990000;">(</span><span style="color: #009900;">@done</span><span style="color: #990000;">)</span> <span style="color: #ff0000;">{</span>
    <strong><span style="color: #0000ff;">if</span></strong> <span style="color: #990000;">(</span> <span style="color: #009900;">$srcnode</span> <span style="color: #990000;">=~</span> <span style="color: #ff0000;">/^RFC/</span> <span style="color: #990000;">)</span> <span style="color: #ff0000;">{</span>
        <strong><span style="color: #0000ff;">print</span></strong> <span style="color: #ff0000;">"{rank=same; "</span> <span style="color: #990000;">.</span> <span style="color: #009900;">$srcnode</span> <span style="color: #990000;">.</span> <span style="color: #ff0000;">" "</span> <span style="color: #990000;">.</span> <span style="color: #009900;">$srcdate</span><span style="color: #ff0000;">{</span><span style="color: #009900;">$srcnode</span><span style="color: #ff0000;">}</span> <span style="color: #990000;">.</span> <span style="color: #ff0000;">";}\n"</span><span style="color: #990000;">;</span>
    <span style="color: #ff0000;">}</span>
<span style="color: #ff0000;">}</span>

<em><span style="color: #9a1900;"># draw the edges</span></em>
<strong><span style="color: #0000ff;">foreach</span></strong> <strong><span style="color: #0000ff;">my</span></strong> <span style="color: #009900;">$srcnode</span> <span style="color: #990000;">(</span><span style="color: #009900;">@done</span><span style="color: #990000;">)</span> <span style="color: #ff0000;">{</span>
    <strong><span style="color: #0000ff;">if</span></strong> <span style="color: #990000;">(</span> <span style="color: #009900;">$srcnode</span> <span style="color: #990000;">=~</span> <span style="color: #ff0000;">/^RFC/</span> <span style="color: #990000;">)</span> <span style="color: #ff0000;">{</span>
        <strong><span style="color: #0000ff;">if</span></strong> <span style="color: #990000;">(</span> @<span style="color: #ff0000;">{</span> <span style="color: #009900;">$srcHoA</span><span style="color: #ff0000;">{</span><span style="color: #009900;">$srcnode</span><span style="color: #ff0000;">}</span> <span style="color: #ff0000;">}</span> <span style="color: #990000;">)</span> <span style="color: #ff0000;">{</span>
            <strong><span style="color: #0000ff;">foreach</span></strong> <strong><span style="color: #0000ff;">my</span></strong> <span style="color: #009900;">$ref</span> <span style="color: #990000;">(</span> @<span style="color: #ff0000;">{</span> <span style="color: #009900;">$srcHoA</span><span style="color: #ff0000;">{</span><span style="color: #009900;">$srcnode</span><span style="color: #ff0000;">}</span> <span style="color: #ff0000;">}</span> <span style="color: #990000;">)</span> <span style="color: #ff0000;">{</span>
                <strong><span style="color: #0000ff;">print</span></strong> <span style="color: #009900;">$srcnode</span> <span style="color: #990000;">.</span> <span style="color: #ff0000;">" -&gt; "</span> <span style="color: #990000;">.</span> <span style="color: #009900;">$ref</span> <span style="color: #990000;">.</span> <span style="color: #ff0000;">";\n"</span><span style="color: #990000;">;</span>
            <span style="color: #ff0000;">}</span>
        <span style="color: #ff0000;">}</span>
    <span style="color: #ff0000;">}</span>
<span style="color: #ff0000;">}</span>

<em><span style="color: #9a1900;">#close the graph</span></em>
<strong><span style="color: #0000ff;">print</span></strong> <span style="color: #ff0000;">"}\n"</span>

</tt></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>493</wp:post_id>
		<wp:post_date>2011-02-12 19:47:05</wp:post_date>
		<wp:post_date_gmt>2011-02-13 01:47:05</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>rfc-map-rfcmap-pl</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="computers"><![CDATA[Computers]]></category>
		<category domain="category" nicename="main"><![CDATA[Main]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Flash Performance on Terminal Services RDP 7.1</title>
		<link>http://www.snakelegs.org/flash-performance-on-terminal-services-rdp-7-1/</link>
		<pubDate>Tue, 22 Feb 2011 19:37:27 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.snakelegs.org/?p=506</guid>
		<description></description>
		<content:encoded><![CDATA[[This is a followup to <a href="http://www.snakelegs.org/2008/10/14/flash-performance-on-terminal-services-rdp/">my 2008 post on Flash performance over RDP</a>.]

Windows Server 2008 R2 Service Pack 1 is being released to the masses  today, and the graphics improvements Microsoft picked up when they  bought Calista are now released as <a href="http://www.microsoft.com/windowsserver2008/en/us/rds-remotefx.aspx">RemoteFX</a>.  This RDP 7.1 update should  provide better display performance for those forced by a cruel and  uncaring universe to make Adobe Flash available over RDP over  broadband.  One hopes.

The most effective course of action remains to block Flash  advertisements at the proxy server (squid + adzapper, or <a href="http://www.privoxy.org/">Privoxy</a>), and  require the user to enable Flash when needed.  If the Flash file (.swf, say) is blocked, multiply all your performance hits by 0 -- there's nothing to transfer or optimize.  Block all the junk you don't need.

Notes.....
<!--more-->
<a href="http://www.ie7pro.com/">IE7Pro</a> has worked well on 2003, but it doesn't work properly on 2008R2, and development is closed (and stagnated?).  It shouldn't be so difficult....
<h1>Globally Disable and Enable Flash</h1>
<a href="http://flash.melameth.com/">Toggle Flash</a> is an IE plug-in that toggles Flash (clear enough).

Changing a registry entry is all that's required to enable and disable Flash. (see below)

Possibly, on terminal server login, disable Flash.  User must explicitly re-enable it.

Powershell (scripting out loud....)
<pre>&lt;# flashwatch.ps1
Enable flash.  Hang around a while and after 15 minutes or so, keep an eye on Internet Explorer.  
If IE isn't running, disable Flash again.todo: make sure only one copy of this script is running
per user.#&gt;

function flash-disable {
 $RegKey ="HKCU:\Software\Microsoft\Windows\CurrentVersion\Ext\Settings\{D27CDB6E-AE6D-11CF-96B8-444553540000}"
 Set-ItemProperty -path $RegKey -name Flags -value 1
}

function flash-enable {
 $RegKey ="HKCU:\Software\Microsoft\Windows\CurrentVersion\Ext\Settings\{D27CDB6E-AE6D-11CF-96B8-444553540000}"
 Set-ItemProperty -path $RegKey -name Flags -value 0
}

flash-enable
sleep -s 900

$keeprunning = $true
while ($keeprunning) {
 if ((Get-Process "iexplore" -ea SilentlyContinue) -eq $Null){ 
   flash-disable
   $keeprunning = $false
 }
 else {
   sleep -s 60
 }
}</pre>
A timestamp would be better.  Enable -&gt; write timestamp.  Have periodic job check if time is expired (<a href="http://technet.microsoft.com/en-us/library/ee176916.aspx">New-Timespan</a>), and disable Flash after. Powershell is awkward.  It's odd when Perl is easier....
<h1>Limit Flash to Specific Domains</h1>
<h2>IE 8 - per-site ActiveX Control</h2>
Per-Site ActiveX Controls
<a href="http://msdn.microsoft.com/en-us/library/dd433050%28VS.85%29.aspx">http://msdn.microsoft.com/en-us/library/dd433050%28VS.85%29.aspx</a>

How to Disable Adobe Flash Animations for All but White-Listed Sites in Internet Explorer 8
<a href="http://www.winhelponline.com/blog/disable-flash-all-but-whitelist-sites-ie8/">http://www.winhelponline.com/blog/disable-flash-all-but-whitelist-sites-ie8/</a>

regedit /s flash_allow.reg

[flash_allow.reg]
Windows Registry Editor Version 5.00
[HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Ext\Stats\{D27CDB6E-AE6D-11CF-96B8-444553540000}\iexplore\AllowedDomains\youtube.com]

The user can just say "run on all sites" so you may have to regularly remove
[HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Ext\Stats\{D27CDB6E-AE6D-11CF-96B8-444553540000}\iexplore\AllowedDomains\*]

Problems with Per-Site ActiveX Controls
<ul>
	<li> Annoying information bar which is IMPOSSIBLE TO SHUT UP.</li>
	<li>User can just add all sites.</li>
	<li>Setting is per-user setting, so it's a PIA to restrict to specific machines (GP loopback).</li>
</ul>
<h2>IE 9 - ActiveX Filtering</h2>
IE 9 (currently at RC) is set to include ActiveX Filtering, enabling you  to restrict ActiveX controls to certain domains.  But it's apparently  global. You can restrict or allow <em>all </em>ActiveX controls on certain sites, but you  can't restrict individual controls.  It would be desirable to be able  to restrict the Flash plug-in to youtube.com, or to restrict <a href="http://www.alternatiff.com/">AlternaTIFF</a> to designated sites.  Being able to  specify these per machine would be better yet.  This looks passably adequate.

<a href="http://ie.microsoft.com/testdrive/Browser/ActiveXFiltering/About.html">About ActiveX Filtering</a>

"Sites you have not approved cannot run these controls, and the browser  <strong>will not show prominent notifications prompting you to install or enable  them</strong>."  Hallelujah, Brother.

<a href="http://www.ditii.com/2011/02/10/how-to-manage-your-internet-explorer-9-activex-filtering-exceptions/">How To Manage Your Internet Explorer 9 ActiveX Filtering Exceptions</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>506</wp:post_id>
		<wp:post_date>2011-02-22 13:37:27</wp:post_date>
		<wp:post_date_gmt>2011-02-22 19:37:27</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>flash-performance-on-terminal-services-rdp-7-1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="main"><![CDATA[Main]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>My Password</title>
		<link>http://www.snakelegs.org/my-password/</link>
		<pubDate>Sat, 26 Feb 2011 04:24:46 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.snakelegs.org/?p=509</guid>
		<description></description>
		<content:encoded><![CDATA[It's terrible practice, I know, but my password is the name of my dog.  My dog's name is H^7a(;tQ.

&nbsp;

<strong>UPDATE:  </strong>I'm being notified by various systems that my dog's name doesn't meet the minimum name length, so I have renamed my dog to Y05!z[2@,*HUps%3.  If it weren't for the number and special character requirements, I had planned to just name him the <a href="http://world.std.com/~reinhold/diceware.html">Diceware </a>passphrase 'doublespadeambiguouslactationconsultant'.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>509</wp:post_id>
		<wp:post_date>2011-02-25 22:24:46</wp:post_date>
		<wp:post_date_gmt>2011-02-26 04:24:46</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>my-password</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="computers"><![CDATA[Computers]]></category>
		<category domain="category" nicename="main"><![CDATA[Main]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Drawing Protocol, Packet, Sequence, State, and General Diagrams</title>
		<link>http://www.snakelegs.org/drawing-protocol-packet-sequence-state-and-general-diagrams/</link>
		<pubDate>Sat, 12 Mar 2011 05:58:25 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.snakelegs.org/?p=512</guid>
		<description></description>
		<content:encoded><![CDATA[Here's the quickest way I've found to produce good diagrams for certain types of technical diagrams.  You can export them to SVG or EPS and use them in most anything.

<strong>Protocol Diagrams (packet diagrams)</strong>: use the LaTeX <a href="http://www.ctan.org/tex-archive/macros/latex/contrib/bytefield/">bytefield</a> package.  It's easy.

<strong>Sequence Diagrams</strong>: use <a href="http://www.mcternan.me.uk/mscgen/">Mscgen</a>.  Easier than <a href="https://mailman.research.att.com/pipermail/graphviz-interest/2005q2/002301.html">Graphviz</a> on this.

<strong>Graphs</strong> (general): use <a href="http://www.graphviz.org/">Graphviz</a>. And the <a href="http://search.cpan.org/dist/GraphViz/">Perl module</a> generally makes life easier.

<strong>State Diagrams</strong>: use <a href="http://www.graphviz.org/content/fsm">Graphviz</a>, or <a href="http://www.texample.net/tikz/examples/state-machine/">Tikz</a>.  Tikz is intimidating, but state diagrams are simple enough.

<strong>General drawing</strong>: try <a href="http://inkscape.org/">Inkscape</a>, and don't forget <a href="http://www.openclipart.org/">OpenClipArt.org</a>.

&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>512</wp:post_id>
		<wp:post_date>2011-03-11 23:58:25</wp:post_date>
		<wp:post_date_gmt>2011-03-12 05:58:25</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>drawing-protocol-packet-sequence-state-and-general-diagrams</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="computers"><![CDATA[Computers]]></category>
		<category domain="category" nicename="main"><![CDATA[Main]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>

	<item>
				<title>Catching Flies With Alice</title>
		<link>http://www.snakelegs.org/catching-flies-with-alice/</link>
		<pubDate>Tue, 20 Sep 2011 04:19:56 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.snakelegs.org/?p=565</guid>
		<description></description>
		<content:encoded><![CDATA[Back in the day, I worked in Alzheimer's units in nursing homes.  My favorite patient -- or 'resident' -- was Alice, who couldn't remember my name, though she recognized me and was very friendly.  Her medication had her manic, and she was forever walking restlessly.  She once had a cut on her knee, and she got in and out of bed so frequently that I could count the blood polka dots on the edge of the bed.

The Alzheimer's unit had 8' drop ceilings, and there were usually flies on the ceiling [classy joint].  So, I'd fill up a cup with water and add a little detergent.  Alice and I would walk up and down the long main hall, and when I saw a fly on the ceiling I'd lift the cup up slowly under the fly, and the fly would drop into the cup, get trapped by the detergent, and squirm to death.  I'd hold the cup down for Alice to watch, and she got a kick out of it.  We spent <em>hours</em> walking up and down that hall, holding hands and catching flies [the other residents decided to sleep].  It was the easiest way to keep her calm.

This weekend, my sleeping schedule got screwed up, and at midnight I ended up grabbing a book of the shelf for a good re-read.  The book is "God Bless You, Mr. Rosewater," by Kurt Vonnegut Jr., of course, and I hadn't read it since high school.  Plugging along, I got to page 78:
<blockquote><em>"The tumbler-and-soapsuds techniqe worked like this:  A woman would look for a fly hanging upside down.  She would then bring her tumbler of suds directly under the fly very slowly, taking advantage of the fact that an upside-down fly, when approached by danger, will drop striaght down two inches or more, in a free fall, before using his wings.  Ideally, the fly would not sense danger until it was directly below him, and he would obligingly drop into the suds to be caught, to work his way down through the bubbles, to drown."</em>

<em>"Of this technique Eliot often said: 'Nobody believes it until she tries it.  Once she finds out it works, she never wants to quit.'"</em></blockquote>
So <em><span style="text-decoration: underline;">that's</span></em> where I picked that up!  What an unexpected surprise!  Nostalgia .... catching flies with Alice......

Alice's doctor played around with her medication, and there was about a two week period where Alice was lucid and could remember my name.  "Alice, do you know my name?"  "Jason," and she'd smile like she was a six-year-old who just got a new bicycle.  Then she went downhill and ended up in the hospital.  I went to visit her every day, but she was near death and couldn't even open her eyes.  The nurses put a respirator mask over her mouth, to keep out the flies.  She died pretty shortly after entering the hospital.

How strange that as I approach 40, one of my fondest memories is the hours spent with a 70-year-old woman with dementia, who couldn't remember my name, walking up and down the hall, holding hands, catching flies in a cup of dishwater.....

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>565</wp:post_id>
		<wp:post_date>2011-09-19 22:19:56</wp:post_date>
		<wp:post_date_gmt>2011-09-20 04:19:56</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>catching-flies-with-alice</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="main"><![CDATA[Main]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>

				<title>PHP SOAP Handling of SAP Table Reads</title>
		<link>http://www.snakelegs.org/php-soap-handling-of-sap-table-reads/</link>
		<pubDate>Sun, 11 Mar 2012 20:29:08 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.snakelegs.org/?p=626</guid>
		<description></description>
		<content:encoded><![CDATA[Here’s how to handle tables returned from SAP, with PHP+SOAP.
<!--more-->
<a href="http://www.snakelegs.org/wp-content/uploads/2012/03/sap_php_table.jpg"><img class="aligncenter size-full wp-image-631" title="SAP PHP SOAP table" src="http://www.snakelegs.org/wp-content/uploads/2012/03/sap_php_table.jpg" alt="" width="376" height="398" /></a>

Note that “AtpTable” is listed as input (non-optional). Just pass it an empty string. For the output, you have to handle 3 cases: empty, 1 result (returns a single object), more than 1 result (returns an array). Make sure SOAP_SINGLE_ELEMENT_ARRAYS is set, which returns an array of 1 item when only 1 item exists (PHP considers that a feature, not a bug). Then you just test that the array exists (isset).

&nbsp;

[php highlight="4,31,32,33" wraplines="1"]
&lt;?php
$SOAP_OPTS = array( 'login' =&gt; '&lt;THEACCOUNT&gt;',
                    'password' =&gt; '&lt;THEPASSWORD&gt;',
                    'features' =&gt; SOAP_SINGLE_ELEMENT_ARRAYS);
$WSDL = &quot;http://sap.corp.example.com:8000/sap/bc/srt/wsdl/bndg_BLAHBLAHBLAH/wsdl11/allinone/standard/document?sap-client=100&quot;;
$client = new SoapClient($WSDL,$SOAP_OPTS);
$params = array(
    'AtpTable' =&gt; &quot;&quot;,
    'Branch' =&gt; &quot;1&quot;,
    'CheckRule' =&gt; &quot;A&quot;,
    'GetRows' =&gt; &quot;100&quot;,
    'IncludeUnsavSo' =&gt; &quot;X&quot;,
    'StartMaterial' =&gt; &quot;12345&quot;,
    'Sloc' =&gt; &quot;0001&quot;
);

try
{
    $result = $client-&gt;ZfmGetAtpTest($params);
}

catch (SoapFault $exception)
{
    print &quot;***Caught Exception***\n&quot;;
    print_r($exception);
    print &quot;***END Exception***\n&quot;;
    die();
}

#print_r($result);
if (isset($result-&gt;AtpTable-&gt;item)) {
    foreach ($result-&gt;AtpTable-&gt;item as $row) {
        print &quot;$row-&gt;Material\t$row-&gt;Branch\t$row-&gt;AtpQty\n&quot;;
    }
}
?&gt;
[/php]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>626</wp:post_id>
		<wp:post_date>2012-03-11 14:29:08</wp:post_date>
		<wp:post_date_gmt>2012-03-11 20:29:08</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>php-soap-handling-of-sap-table-reads</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="computers"><![CDATA[Computers]]></category>
		<category domain="category" nicename="main"><![CDATA[Main]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_description</wp:meta_key>
			<wp:meta_value><![CDATA[How to handle tables returned from SAP, with PHP and SOAP.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[PHP,SOAP,SAP,table,SOAMANAGER,SE80,SE85,WSDL SOAP_SINGLE_ELEMENT_ARRAYS,Magento]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_title</wp:meta_key>
			<wp:meta_value><![CDATA[PHP SOAP Handling of SAP Table Reads]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>C - Assignment vs. Equality</title>
		<link>http://www.snakelegs.org/c-assignment-vs-equality/</link>
		<pubDate>Mon, 12 Mar 2012 01:57:47 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.snakelegs.org/?p=638</guid>
		<description></description>
		<content:encoded><![CDATA[DISCLAIMER - I DON'T DO C.  And my Perl isn't great, either.

I routinely browse the openbsd-cvs mailing list, and I saw this easy openbsd-cvs bug fix ("<a href="http://marc.info/?l=openbsd-tech&amp;m=132966574603292&amp;w=2">Fix a stupid bug in tcpdump print-bgp.c</a>") the other night when doing some really late-night, partial-involvement sysadmin work.  So I decided to pass the time ("stay awake") by doing a regex exercise to find similar patterns in the OpenBSD source tree.

<!--more-->

In C:
<ul>
	<li>"a = b" (single equals sign) is the assignment operator.  Take the value of "b" and put it in "a."</li>
	<li>"a == b" (double equals signs) is an equality test.  If "a" equals "b" then the expression evaluates true.</li>
</ul>
It's an <a href="http://www.andromeda.com/people/ddyer/topten.html">easy bug to introduce</a>, using a single = when you want two, so I tried to find more.  Mainly, it was regex practice.

[perl]
#!/usr/bin/perl -w

use strict;

if ( $#ARGV &lt; 0 ) {
    die &quot;Specify a file.\n&quot;;
}

my $file = $ARGV[0];

open( SOURCEFILE, &quot;&lt;$file&quot; ) || die &quot;Can't open file $file.\n&quot;;

while (&lt;SOURCEFILE&gt;) {

    my $line = $_;
    chomp($line);

    if ( $line =~ /^\s*if\s.*\s=\s(-)?\d/ ) {

        $line =~ s/^\s*//;s/\s*$//;

        unless ( $line =~ /^(\*|\/\*)/ ) {
            unless ( $line =~ /(\(.*\).*\s=\s)/ ) {
                print &quot;/*$file: $. */\n$line\n\n&quot;;
            }
        }
    }
}

close(SOURCEFILE);
[/perl]

It includes lines that are part of a multi-line comment, but my time and interest are exhausted, and I could have sworn there were compiler options to test for this anyway ...?  And I don't do C.

In the whole tree, I ended up with only a few cases where an assignment occurs in the condition of an if statement:

[shell]
$ find /usr/src -type f -name \*.c -exec ./assigntest.pl '{}' \;
[/shell]
[c]
/*/usr/src/sys/arch/alpha/alpha/in_cksum.c: 101 */
if ((offset = 3 &amp; (long) lw) != 0) {

/*/usr/src/sys/dev/gpio/gpiodcf.c: 466 */
if ((ymdhm.dt_year = 2000 + FROMBCD(year_bits)) &gt; 2037) {

/*/usr/src/sys/dev/usb/udcf.c: 669 */
if ((ymdhm.dt_year = 2000 + FROMBCD(year_bits)) &gt; 2037) {

/*/usr/src/sys/net/zlib.c: 3830 */
if ((f = 1 &lt;&lt; (j = k - w)) &gt; a + 1)     /* try a k-w bit table */

/*/usr/src/bin/ed/main.c: 603 */
if ((garrulous = 1 - garrulous) &amp;&amp; *errmsg)

/*/usr/src/bin/rmail/rmail.c: 188 */
if ((from_path = malloc(fptlen = 256)) == NULL)

/*/usr/src/gnu/egcs/libio/floatconv.c: 1878 */
if (j = 11 - hi0bits(word0(d2) &amp; Frac_mask))

/*/usr/src/gnu/usr.bin/binutils/gas/config/tc-i860.c: 606 */
if ((c = 10 * (c - '0') + (*s++ - '0')) &gt;= 32)

/*/usr/src/gnu/usr.bin/binutils/gas/config/tc-sparc.c: 2052 */
if ((c = 10 * (c - '0') + (*s++ - '0')) &gt;= 32)

/*/usr/src/gnu/usr.bin/binutils/gas/config/tc-tic4x.c: 464 */
if (flonum.low &gt; flonum.leader  /* = 0.0e0 */

/*/usr/src/gnu/usr.bin/binutils/gdb/ns32knbsd-nat.c: 297 */
if (enter_addr = 0)

/*/usr/src/gnu/usr.bin/cvs/zlib/inftrees.c: 218 */
if ((f = 1 &lt;&lt; (j = k - w)) &gt; a + 1)     /* try a k-w bit table */

/*/usr/src/gnu/usr.bin/gas/config/tc-i860.c: 499 */
if ((c = 10 * (c - '0') + (*s++ - '0')) &gt;= 32) {

/*/usr/src/gnu/usr.bin/gas/config/tc-sparc.c: 745 */
if ((c = 10 * (c - '0') + (*s++ - '0')) &gt;= 32) {

/*/usr/src/gnu/usr.bin/gcc/gcc/testsuite/gcc.c-torture/execute/20001221-1.c: 4 */
if (! (a = 0xfedcba9876543210ULL))

/*/usr/src/gnu/usr.bin/gcc/gcc/testsuite/gcc.dg/20020426-2.c: 103 */
if ((f = 1 &lt;&lt; (j = k - w)) &gt; a + 1)

/*/usr/src/gnu/usr.bin/gcc/gcc/testsuite/gcc.dg/c99-bool-1.c: 207 */
if ((u = 2) != 1)

/*/usr/src/gnu/usr.bin/gcc/gcc/testsuite/gcc.dg/compare4.c: 36 */
if (u &lt; (x = -1)) /* { dg-warning &quot;signed and unsigned&quot; &quot;MODIFY_EXPR&quot; } */

/*/usr/src/gnu/usr.bin/gcc/gcc/testsuite/gcc.dg/compare4.c: 38 */
if (u &lt; (x = 10))

/*/usr/src/gnu/usr.bin/gcc/gcc/testsuite/gcc.dg/compare4.c: 40 */
if ((x = 10) &lt; u)

/*/usr/src/gnu/usr.bin/binutils-2.17/gas/config/tc-i860.c: 606 */
if ((c = 10 * (c - '0') + (*s++ - '0')) &gt;= 32)

/*/usr/src/gnu/usr.bin/binutils-2.17/gas/config/tc-sparc.c: 2102 */
if ((c = 10 * (c - '0') + (*s++ - '0')) &gt;= 32)

/*/usr/src/gnu/usr.bin/binutils-2.17/gas/config/tc-tic4x.c: 463 */
if (flonum.low &gt; flonum.leader  /* = 0.0e0 */

/*/usr/src/gnu/usr.sbin/sendmail/rmail/rmail.c: 228 */
if ((from_path = malloc(fptlen = 256)) == NULL)

/*/usr/src/lib/libc/gdtoa/dtoa.c: 212 */
if (( j = 11 - hi0bits(word0(&amp;d2) &amp; Frac_mask) )!=0)

/*/usr/src/lib/libc/gdtoa/gdtoa.c: 211 */
if ( (j = 11 - hi0bits(word0(&amp;d) &amp; Frac_mask)) !=0)

/*/usr/src/lib/libc/gdtoa/gdtoa.c: 344 */
if ( (j = 11 - hi0bits(word0(&amp;d) &amp; Frac_mask)) !=0)

/*/usr/src/lib/libc/gdtoa/strtod.c: 74 */
if (!scale || (i = 2*P + 1 - ((word0(x) &amp; Exp_mask) &gt;&gt; Exp_shift)) &lt;= 0)

/*/usr/src/lib/libc/gdtoa/strtod.c: 532 */
if (scale &amp;&amp; (j = 2*P + 1 - ((word0(&amp;rv) &amp; Exp_mask)

/*/usr/src/lib/libedit/common.c: 909 */
if (tmplen &lt; 0 || (tmpbuf[tmplen] = 0, parse_line(el, tmpbuf)) == -1)

/*/usr/src/usr.bin/apply/apply.c: 146 */
if ((c = malloc(clen = 1024)) == NULL)

/*/usr/src/usr.bin/xlint/lint1/decl.c: 1913 */
if (!redec &amp;&amp; !isredec(dsym, (warn = 0, &amp;warn))) {

/*/usr/src/usr.bin/xlint/lint1/func.c: 306 */
if (!isredec(fsym, (warn = 0, &amp;warn))) {

/*/usr/src/usr.bin/xlint/lint1/tree.c: 3284 */
if (!eqtype(tp, tn-&gt;tn_type, 1, 0, (warn = 0, &amp;warn)) || warn)
[/c]

They look fine to me, but all the same, it's still a curious idiom to occur so few times.

[c]
#toy test
#include &lt;stdio.h&gt;

int main(){
    int     a;
    if ((a = 2000 + 50) &gt; 2037) {
        printf(&quot;TRUE - a is %d\n&quot;,a);
    }
    else {
        printf(&quot;FALSE - a is %d\n&quot;,a);
    }
return 0;
}
/* TRUE - a is 2050 */
[/c]

And then I went to bed.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>638</wp:post_id>
		<wp:post_date>2012-03-11 19:57:47</wp:post_date>
		<wp:post_date_gmt>2012-03-12 01:57:47</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>c-assignment-vs-equality</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="computers"><![CDATA[Computers]]></category>
		<category domain="category" nicename="main"><![CDATA[Main]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Constraint Satisfaction - Product Mix - Wood Paneling Example</title>
		<link>http://www.snakelegs.org/constraint-satisfaction-product-mix-wood-paneling-example/</link>
		<pubDate>Fri, 16 Mar 2012 05:45:29 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.snakelegs.org/?p=671</guid>
		<description></description>
		<content:encoded><![CDATA[Don't get me started.... It's amazing that Operations Research / Optimization / Contraint Satisfaction have come so far ( the Holy Grail of Computing ), yet so very few IT personnel even know about it....
<!--more-->
[text]
% minizinc product mix model from http://www.solver.com/stepbystep.htm
% 2012 Jason Filley (jason@snakelegs.org)



%%%% parameters
int: glue = 5800;		% glue (quarts)
int: pressing = 730;	% pressing time (hours)
int: pine = 29200;		% pine chips (pounds)
int: oak = 32500;		% oak chips (pounds)


constraint assert(glue &gt;= 0,&quot;Invalid datafile: &quot; ++
	&quot;glue must be non-negative.&quot;);
constraint assert(pressing &gt;= 0,&quot;Invalid datafile: &quot; ++
	&quot;pressing must be non-negative.&quot;);
constraint assert(pine &gt;= 0,&quot;Invalid datafile: &quot; ++
	&quot;pine must be non-negative.&quot;);
constraint assert(oak &gt;= 0,&quot;Invalid datafile: &quot; ++
	&quot;oak must be non-negative.&quot;);

	
%%%% decision variables
var 0..100: tahoe;
var 0..100: pacific;
var 0..100: savannah;
var 0..100: aspen;


%%%% constraints

% glue
constraint  50*tahoe + 50*pacific + 100*savannah + 50*aspen &lt;= glue;

% pressing time
constraint  5*tahoe + 15*pacific + 10*savannah + 5*aspen &lt;= pressing;

% pine chips
constraint  500*tahoe + 400*pacific + 250*savannah + 200*aspen &lt;= pine;

% oak chips
constraint  500*tahoe + 750*pacific + 250*savannah + 500*aspen &lt;= oak;



%%%% objective function -- maximize profit
var 0..100000: profit;
profit = 450*tahoe + 1150*pacific + 800*savannah + 400*aspen;
solve maximize profit;


output [&quot;Tahoe: &quot;, show(tahoe), &quot;\n&quot;,
		&quot;Pacific: &quot;, show(pacific), &quot;\n&quot;,
		&quot;Savannah: &quot;, show(savannah), &quot;\n&quot;,
		&quot;Aspen: &quot;, show(aspen), &quot;\n&quot;,
		&quot;Profit: &quot;, show(profit), &quot;\n&quot;];

% minizinc.exe product_mix_wood_paneling.mzn
% Tahoe: 23
% Pacific: 15
% Savannah: 39
% Aspen: 0
% Profit: 58800
% ----------
[/text]
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>671</wp:post_id>
		<wp:post_date>2012-03-15 23:45:29</wp:post_date>
		<wp:post_date_gmt>2012-03-16 05:45:29</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>constraint-satisfaction-product-mix-wood-paneling-example</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="computers"><![CDATA[Computers]]></category>
		<category domain="category" nicename="main"><![CDATA[Main]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>

	<item>
				<title>The SAP Elf</title>
		<link>http://www.snakelegs.org/the-sap-elf/</link>
		<pubDate>Fri, 13 Apr 2012 16:38:23 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.snakelegs.org/?p=691</guid>
		<description></description>
		<content:encoded><![CDATA[I laugh every time I see this screen in SAP ...

<img class="aligncenter size-full wp-image-695" title="elves" src="http://www.snakelegs.org/wp-content/uploads/2012/04/elves3.png" alt="" width="569" height="192" />

... because I know what the girl on the right is thinking ...

<a href="http://www.snakelegs.org/wp-content/uploads/2012/04/elves22.png"><img class="aligncenter size-full wp-image-700" title="thinking" src="http://www.snakelegs.org/wp-content/uploads/2012/04/elves22.png" alt="" width="569" height="192" /></a>

For posterity, here's an edited picture that doesn't make the girl on the left have pointy ears.

<a href="http://www.snakelegs.org/wp-content/uploads/2012/04/elves32.png"><img class="aligncenter size-full wp-image-701" title="edited" src="http://www.snakelegs.org/wp-content/uploads/2012/04/elves32.png" alt="" width="569" height="192" /></a>

There went my lunch hour.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>691</wp:post_id>
		<wp:post_date>2012-04-13 10:38:23</wp:post_date>
		<wp:post_date_gmt>2012-04-13 16:38:23</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>the-sap-elf</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="main"><![CDATA[Main]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Java 2753 regutils.dll error</title>
		<link>http://www.snakelegs.org/java-2753-regutils-dll-error/</link>
		<pubDate>Mon, 07 May 2012 20:09:23 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.snakelegs.org/?p=732</guid>
		<description></description>
		<content:encoded><![CDATA[What perverse incentives exist to prevent Sun/Oracle from streamlining Java installations on Windows?  They have FAQ items that have been unresolved for <em>years</em>.  Don't tell me you can't reproduce them; I can.  You'd think that routine professional curiosity would impel them to troubleshoot a live customer issue.  <a href="https://forums.oracle.com/forums/thread.jspa?messageID=9375934&amp;#9375934">Sheer laziness</a>.

I had a workstation today that would not install the 6.0_update32 JRE, getting the error "error 2753 regutils.dll".

<a href="https://forums.oracle.com/forums/thread.jspa?threadID=1316410&amp;start=15&amp;tstart=30">Sun/Oracle's 'troubleshooting' is worthless</a>.  Nobody else's was any help, either, though.  <a href="http://singularlabs.com/software/javara/">JavaRa</a> gave it a good try. (Seriously, you just have a comprehensive list of registry keys and files/directories to delete.  That's all.)

So, fire up <a href="http://technet.microsoft.com/en-us/sysinternals/bb896645">procmon</a>, include "msiexec.exe" and see what pops up....

<a href="http://www.snakelegs.org/wp-content/uploads/2012/05/java_2753_regutil_dll_error.png"><img class="aligncenter size-full wp-image-733" title="java_2753_regutil_dll_error" src="http://www.snakelegs.org/wp-content/uploads/2012/05/java_2753_regutil_dll_error.png" alt="" width="766" height="299" /></a>

Simple enough.  The installer thinks there's another conflicting existing installation:

<a href="http://www.snakelegs.org/wp-content/uploads/2012/05/java_2753_error_registry.png"><img class="aligncenter size-full wp-image-734" title="java_2753_error_registry" src="http://www.snakelegs.org/wp-content/uploads/2012/05/java_2753_error_registry.png" alt="" width="657" height="212" /></a>

Delete the registry key (and subkeys):

HKEY_CLASSES_ROOT\Installer\Products\4EA42A62D9304AC4784BF238120632FF

Grand.

So, why can't Sun/Oracle release a utility to clean up all traces of Java?  Laziness, pure and simple.  This has been a pain for admins for years.  Fix your installer.

cf the <a href="http://blogs.msdn.com/b/astebner/archive/2008/08/28/8904493.aspx">.NET Framework Cleanup Tool</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>732</wp:post_id>
		<wp:post_date>2012-05-07 14:09:23</wp:post_date>
		<wp:post_date_gmt>2012-05-07 20:09:23</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>java-2753-regutils-dll-error</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="main"><![CDATA[Main]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>

	<item>
				<title>Extract Email Addresses for LinkedIn</title>
		<link>http://www.snakelegs.org/extract-email-addresses-for-linkedin/</link>
		<pubDate>Wed, 15 Aug 2012 02:46:58 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.snakelegs.org/?p=745</guid>
		<description></description>
		<content:encoded><![CDATA[Went to extract email addresses from different Outlook .pst's and other exported files to import into LinkedIn.  Any email client will export to text files.

<a href="http://thetechieguy.com/2012/07/24/extracting-email-address-from-outlook-folder-subfolders/">To extract email addresses from Outlook, try this Visual Basic script</a>.  That's not just a Contacts export; it extracts Sender addresses from email messages.

Throw everything into one file.  Then extract email addresses, as:
<pre>$ egrep -io '[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]+' &lt; input.txt | tr "[:upper:]" "[:lower:]" | sort -u &gt;output.txt</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>745</wp:post_id>
		<wp:post_date>2012-08-14 20:46:58</wp:post_date>
		<wp:post_date_gmt>2012-08-15 02:46:58</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>extract-email-addresses-for-linkedin</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="main"><![CDATA[Main]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>LaTeX XeTeX Resume Template Sample</title>
		<link>http://www.snakelegs.org/latex-xetex-resume-template-sample/</link>
		<pubDate>Sat, 26 Jan 2013 23:57:15 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.snakelegs.org/?p=754</guid>
		<description></description>
		<content:encoded><![CDATA[After reading <a title="Unbeatable Resumes" href="http://www.amazon.com/Unbeatable-Resumes-Americas-Recruiter-Reveals/dp/0814417620/">"Unbeatable Resumes," by Tony Beshara</a>, I decided to update my resume.  I like this format.

See also:
<ul>
	<li><a href="http://stevehanov.ca/blog/index.php?id=56" target="_blank">How a Programmer Reads your Resume (comic)</a></li>
	<li><a href="http://johnmacfarlane.net/pandoc/" target="_blank">Pandoc</a></li>
</ul>
<a href="http://www.snakelegs.org/wp-content/uploads/2013/01/latex_xetex_resume.txt">latex_xetex_resume</a> - txt (Wordpress isn't letting me upload .tex, and it's a fight I don't want to pick).

<a href="http://www.snakelegs.org/wp-content/uploads/2013/01/latex_xetex_resume.pdf">latex_xetex_resume</a> - PDF.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>754</wp:post_id>
		<wp:post_date>2013-01-26 17:57:15</wp:post_date>
		<wp:post_date_gmt>2013-01-26 23:57:15</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>latex-xetex-resume-template-sample</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="computers"><![CDATA[Computers]]></category>
		<category domain="category" nicename="main"><![CDATA[Main]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Regain space on Windows Embedded Standard 7 by Removing Speech Components</title>
		<link>http://www.snakelegs.org/regain-space-on-windows-embedded-standard-7-by-removing-speech-components/</link>
		<pubDate>Sun, 17 Mar 2013 18:51:51 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.snakelegs.org/?p=763</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>UPDATE: <a href="http://support.microsoft.com/kb/2852386">Disk Cleanup Wizard addon lets users delete outdated Windows updates on Windows 7 SP1 or Windows Server 2008 R2 SP1 (KB2852386)</a></strong>

&nbsp;

I picked up an HP t5740e thin client off eBay, as I had deployed some at a prior job.  Window Embedded Standard 7 (32-bit), with 2GB RAM and 4GB flash.  Set it up the way I want it, re-enable the write filter, and Bob's your uncle.   But the default HP build includes components that take up a lot of space, and I have no need for them -- namely, the text-to-speech components, the natural language components, and the SAT performance tests (sample movies).

While logged in as Administrator, with the write filter disabled:

[code language="text"]
dism /online /Get-Packages
[/code]

You'll get a list of all packages installed in the running image. Find the ones you want to delete. Then delete them. Reboot.

[code language="text"]
dism /online /Get-Packages

dism /online /Get-PackageInfo /packagename:WinEmb-Natural-Language~31bf3856ad364e35~x86~~6.1.7601.17514

dism /online /Remove-Package /PackageName:WinEmb-Accessibility~31bf3856ad364e35~x86~~6.1.7601.17514
dism /online /Remove-Package /PackageName:WinEmb-Natural-Language~31bf3856ad364e35~x86~~6.1.7601.17514
dism /online /Remove-Package /PackageName:WinEmb-Speech-LP-ENU~31bf3856ad364e35~x86~~6.1.7600.16385
dism /online /Remove-Package /PackageName:WinEmb-Speech~31bf3856ad364e35~x86~~6.1.7601.17514
dism /online /Remove-Package /PackageName:WinEmb-Diagnostics-Performance~31bf3856ad364e35~x86~~6.1.7601.17514
[/code]
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>763</wp:post_id>
		<wp:post_date>2013-03-17 12:51:51</wp:post_date>
		<wp:post_date_gmt>2013-03-17 18:51:51</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>regain-space-on-windows-embedded-standard-7-by-removing-speech-components</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="computers"><![CDATA[Computers]]></category>
		<category domain="category" nicename="main"><![CDATA[Main]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Resume in Markdown</title>
		<link>http://www.snakelegs.org/resume-in-markdown/</link>
		<pubDate>Sun, 18 Aug 2013 05:55:18 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.snakelegs.org/?p=771</guid>
		<description></description>
		<content:encoded><![CDATA[It used to be a sign of technical prowess to compose a resume in LaTeX -- you wanted to take the extra effort to make a professional, beautiful document. Now, unfortunately, nobody reads printed resumes -- employers just want something to copy-and-paste into a database field so they can search for whatever isolated skillset they're looking for. Nice-looking PDF's may not fit the bill; copying and pasting may lose all the nice ligatures. Where you mention "Office", pasting into Word will drop the "ffi" ligature into gibberish, and you're left with "Oce". Unless you're looking for a printer job, this isn't what you want.

And, face it, almost everyone wants a Microsoft Word copy.

IT staff need to keep their resumes current, regardless of job search status. Employers may want an internal database. They may provide a bundle of resumes to prospective clients, to show off their staff competence -- happened for me recently.

A lot of people have recently concluded that Markdown (in <a href="http://johnmacfarlane.net/pandoc/">Pandoc</a>) is an easily-maintainable and portable text format suitable for publishing resumes. For example:

<a href="http://sysadvent.blogspot.com/2011/12/day-14-write-your-resume-in-markdown.html">http://sysadvent.blogspot.com/2011/12/day-14-write-your-resume-in-markdown.html</a>

Problem is that the PDF's I've seen are serviceable, but they're bug-ugly. The Microsoft Word output is nice, but you still want a decent-looking PDF.

This zip file includes a XeTeX template that I like. The Makefile also generates a Windows-formatted text file suitable for a raw copy-and-paste into online forms. Zips all the output formats into one file, so you can just email someone the whole thing. Pick one.

Name your resume something like "your_name.md" and update the "ME=" line in the Makefile to match "your_name", run `make clean &amp;&amp; make` and Bob's your uncle. Thanks.

<a href="http://www.snakelegs.org/wp-content/uploads/2014/03/resume_template.zip">resume_template</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>771</wp:post_id>
		<wp:post_date>2013-08-17 23:55:18</wp:post_date>
		<wp:post_date_gmt>2013-08-18 05:55:18</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>resume-in-markdown</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="main"><![CDATA[Main]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>SCCM 2007 - Report all Software Update status per Update List and Collection</title>
		<link>http://www.snakelegs.org/sccm-2007-report-all-software-update-status-per-update-list-and-collection/</link>
		<pubDate>Fri, 07 Mar 2014 11:53:13 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.snakelegs.org/?p=799</guid>
		<description></description>
		<content:encoded><![CDATA[SCCM 2007 report to show patch status details per Update List and Collection.  You can get here by drilling down 4 reports deep, individually, for hundreds or thousands of your servers, or you can just run this, throw it into Excel, and filter and munge at will.  Much faster.

[sql]

-- Shows all patch status details, given an Update List and a Collection. Export it to Excel and monkey with it there.
-- Based off of the stock &quot;Compliance 1 - Overall Compliance&quot; report.

DECLARE @AuthListLocalID AS INT
SELECT @AuthListLocalID=CI_ID
 FROM v_AuthListInfo
 WHERE CI_UniqueID=@AuthListID

SELECT
 fcm.Name,
 ps.UpdateID,
 ps.ID,
 ps.Title,
 ps.QNumbers,
 ps.LastStatusMessageIDName,
 ps.LastStateName,
 ps.AgentInstallDate,
 v_UpdateInfo.DatePosted As UpdateDateReleased,
 v_UpdateInfo.DateRevised AS UpdateDateRevised,
 v_UpdateInfo.InfoURL AS UpdateInfoURL,
 v_UpdateInfo.Description AS UpdateDescription

FROM v_UpdateInfo

 INNER JOIN v_GS_PatchStatusEx AS ps ON v_UpdateInfo.CI_UniqueID = ps.UniqueUpdateID
 INNER JOIN v_FullCollectionMembership AS fcm ON ps.ResourceID = fcm.ResourceID
 INNER JOIN v_CIRelation cir ON cir.ToCIID= v_UpdateInfo.CI_ID
 INNER JOIN (v_CICategories_All
 INNER JOIN v_CategoryInfo
 ON v_CICategories_All.CategoryInstance_UniqueID = v_CategoryInfo.CategoryInstance_UniqueID
 AND v_CategoryInfo.CategoryTypeName = 'Company')
 ON v_CICategories_All.CI_ID = v_UpdateInfo.CI_ID

WHERE fcm.CollectionID = @CollID
 AND ps.AgentInstallDate IS NULL --this shows errors only. Comment it out for reports on installed updates.
 AND cir.FromCIID = @AuthListLocalID
 AND cir.RelationType = 1

ORDER BY fcm.Name

-----------
-- Create two prompts, for Update List, and Collection
--
--
-- AuthListID
-- Update List ID (Required)
begin
if (@__filterwildcard = '')
 select distinct CI_UniqueID as AuthListID, Title as Title from v_AuthListInfo order by Title
else
 select distinct CI_UniqueID as AuthListID, Title as Title from v_AuthListInfo
 where ((CI_UniqueID like @__filterwildcard) or
 (Title like @__filterwildcard))
 order by Title
end
-------
-- CollID
-- Collection ID (Required)

begin
 if (@__filterwildcard = '')
 select CollectionID as CollectionID, Name as CollectionName from v_Collection order by Name
 else
 select CollectionID as CollectionID, Name as CollectionName from v_Collection
 WHERE CollectionID like @__filterwildcard or Name like @__filterwildcard
 order by Name
end
 ---

[/sql]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>799</wp:post_id>
		<wp:post_date>2014-03-07 05:53:13</wp:post_date>
		<wp:post_date_gmt>2014-03-07 11:53:13</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>sccm-2007-report-all-software-update-status-per-update-list-and-collection</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="computers"><![CDATA[Computers]]></category>
		<category domain="category" nicename="main"><![CDATA[Main]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Heartbleed</title>
		<link>http://www.snakelegs.org/heartbleed/</link>
		<pubDate>Sun, 13 Apr 2014 23:12:50 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.snakelegs.org/?p=810</guid>
		<description></description>
		<content:encoded><![CDATA[My Wordpress installation sent me an email this morning, saying I was the only person with a blog who hadn't written about heartbleed, and I only have one thing to add, really.

Heartbleed describes a bug in OpenSSL, most succinctly explained by the <a href="http://xkcd.com/1354/">xkcd: Heartbleed Explanation</a> comic.  It's a routine programming bug, but the incomprehensible aspect is that the <a href="http://marc.info/?l=openbsd-misc&amp;m=139698608410938&amp;w=2">OpenSSL authors actively worked around system malloc's and rolled their own: to make you vulnerable <em>that</em> much faster</a> ("exploit mitigation countermeasures").  Other bugs that have been logged for years are presumably being <a href="http://marc.info/?l=openbsd-cvs&amp;m=139715720931888&amp;w=2">reviewed</a>.  Nothing new to add there.

But I say that critical infrastructure exploits should all have better names, though 'heartbleed' isn't bad -- a heartbeat function that bleeds information.  But instead of rolling your own, or going by generic CVE entries, we should pre-allocate alphabetical names, like they do for hurricanes.  Except I'd name them after waitresses, not just generic female names.  So, instead of 'heartbleed' we'd start with 'Amanda.'
<ul>
	<li>Amanda (one of my favorite waitresses)</li>
	<li>Betty (I don't know a waitress named Betty, but I imagine she'd be really good).</li>
	<li>Chelsea (who isn't a waitress any more; she's a parole officer).</li>
	<li>Dotty (Like Betty, I don't know a waitress named Dotty.  I bet Dotty's a good waitress, but not as good as Betty).</li>
	<li>and so on.</li>
</ul>
Everyone could have action plans and themed PowerPoint templates ready.  Next critical infrastructure bug?  Pull out the "Torie" slides, and Bob's your uncle.  That's all I have to say.  Thanks.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>810</wp:post_id>
		<wp:post_date>2014-04-13 17:12:50</wp:post_date>
		<wp:post_date_gmt>2014-04-13 23:12:50</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>heartbleed</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="computers"><![CDATA[Computers]]></category>
		<category domain="category" nicename="main"><![CDATA[Main]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
